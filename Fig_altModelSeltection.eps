%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Fig_altModelSeltection.pdf
%%Creator: Adobe Acrobat 19.12.0
%%For: dtshayma
%%CreationDate: 4/09/2019, 7:44:16 PM
%%BoundingBox: 0 0 576 288
%%HiResBoundingBox: 0 0 576 288
%%CropBox: 0 0 576 288
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
576 288 li
576 0 li
cp
clp
gsave
0 288 mo
576 288 li
576 0 li
0 0 li
cp
clp
0 288 mo
576 288 li
576 0 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0 288 mo
576 288 li
576 0 li
0 0 li
cp
f
1.06698 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
576 0 li
576 288 li
0 288 li
cp
@
gsave
36.16 5.48001 mo
241.238 5.48001 li
241.238 270.238 li
36.16 270.238 li
cp
clp
36.16 5.48001 mo
240.238 5.48001 li
240.238 269.238 li
36.16 269.238 li
cp
f
.533489 lw
0 lc
36.16 205.676 mo
240.238 205.676 li
.0627451 .0476081 .0476081 0 cmyk
@
36.16 130.383 mo
240.238 130.383 li
@
36.16 55.09 mo
240.238 55.09 li
@
1.06698 lw
36.16 243.32 mo
240.238 243.32 li
@
36.16 168.027 mo
240.238 168.027 li
@
36.16 92.734 mo
240.238 92.734 li
@
36.16 17.445 mo
240.238 17.445 li
@
91.816 269.238 mo
91.816 5.48001 li
@
184.578 269.238 mo
184.578 5.48001 li
@
63.801 41.937 mo
63.801 44.543 59.895 44.543 59.895 41.937 cv
59.895 39.332 63.801 39.332 63.801 41.937 cv
.696254 .631098 .620691 .585718 cmyk
f
.708661 lw
1 lc
63.801 41.937 mo
63.801 44.543 59.895 44.543 59.895 41.937 cv
59.895 39.332 63.801 39.332 63.801 41.937 cv
@
1.06698 lw
0 lc
61.848 19.766 mo
61.848 18.391 li
@
61.848 23.715 mo
61.848 28.293 li
@
60.063 19.766 mo
60.063 23.715 li
63.633 23.715 li
63.633 19.766 li
cp
0 .678187 .511376 0 cmyk
f
1 lc
60.063 19.766 mo
60.063 23.715 li
63.633 23.715 li
63.633 19.766 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
60.063 21.309 mo
63.633 21.309 li
@
68.797 32.867 mo
68.797 35.473 64.887 35.473 64.887 32.867 cv
64.887 30.262 68.797 30.262 68.797 32.867 cv
f
.708661 lw
1 lc
68.797 32.867 mo
68.797 35.473 64.887 35.473 64.887 32.867 cv
64.887 30.262 68.797 30.262 68.797 32.867 cv
@
68.797 23.16 mo
68.797 25.766 64.887 25.766 64.887 23.16 cv
64.887 20.555 68.797 20.555 68.797 23.16 cv
f
68.797 23.16 mo
68.797 25.766 64.887 25.766 64.887 23.16 cv
64.887 20.555 68.797 20.555 68.797 23.16 cv
@
1.06698 lw
0 lc
66.844 18.082 mo
66.844 17.707 li
@
65.059 18.082 mo
65.059 18.973 li
68.625 18.973 li
68.625 18.082 li
cp
.115389 .502129 1 .00839246 cmyk
f
1 lc
65.059 18.082 mo
65.059 18.973 li
68.625 18.973 li
68.625 18.082 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
65.059 18.625 mo
68.625 18.625 li
@
73.793 29.32 mo
73.793 31.926 69.883 31.926 69.883 29.32 cv
69.883 26.715 73.793 26.715 73.793 29.32 cv
f
.708661 lw
1 lc
73.793 29.32 mo
73.793 31.926 69.883 31.926 69.883 29.32 cv
69.883 26.715 73.793 26.715 73.793 29.32 cv
@
73.793 19.918 mo
73.793 22.523 69.883 22.523 69.883 19.918 cv
69.883 17.312 73.793 17.312 73.793 19.918 cv
f
73.793 19.918 mo
73.793 22.523 69.883 22.523 69.883 19.918 cv
69.883 17.312 73.793 17.312 73.793 19.918 cv
@
1.06698 lw
0 lc
71.836 17.598 mo
71.836 17.484 li
@
70.055 17.598 mo
70.055 18.207 li
73.621 18.207 li
73.621 17.598 li
cp
.31046 .309331 1 .0233768 cmyk
f
1 lc
70.055 17.598 mo
70.055 18.207 li
73.621 18.207 li
73.621 17.598 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
70.055 17.777 mo
73.621 17.777 li
@
78.785 26.598 mo
78.785 29.207 74.879 29.207 74.879 26.598 cv
74.879 23.992 78.785 23.992 78.785 26.598 cv
f
.708661 lw
1 lc
78.785 26.598 mo
78.785 29.207 74.879 29.207 74.879 26.598 cv
74.879 23.992 78.785 23.992 78.785 26.598 cv
@
1.06698 lw
0 lc
76.832 18.18 mo
76.832 17.566 li
@
76.832 20.531 mo
76.832 22.742 li
@
75.047 18.18 mo
75.047 20.531 li
78.617 20.531 li
78.617 18.18 li
cp
.58175 .110323 1 .00570687 cmyk
f
1 lc
75.047 18.18 mo
75.047 20.531 li
78.617 20.531 li
78.617 18.18 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
75.047 18.727 mo
78.617 18.727 li
@
83.781 21.934 mo
83.781 24.539 79.871 24.539 79.871 21.934 cv
79.871 19.324 83.781 19.324 83.781 21.934 cv
f
.708661 lw
1 lc
83.781 21.934 mo
83.781 24.539 79.871 24.539 79.871 21.934 cv
79.871 19.324 83.781 19.324 83.781 21.934 cv
@
1.06698 lw
0 lc
81.828 17.711 mo
81.828 17.488 li
@
81.828 19.125 mo
81.828 20.047 li
@
80.043 17.711 mo
80.043 19.125 li
83.609 19.125 li
83.609 17.711 li
cp
.777676 0 1 0 cmyk
f
1 lc
80.043 17.711 mo
80.043 19.125 li
83.609 19.125 li
83.609 17.711 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
80.043 17.887 mo
83.609 17.887 li
@
88.777 26.711 mo
88.777 29.316 84.867 29.316 84.867 26.711 cv
84.867 24.105 88.777 24.105 88.777 26.711 cv
f
.708661 lw
1 lc
88.777 26.711 mo
88.777 29.316 84.867 29.316 84.867 26.711 cv
84.867 24.105 88.777 24.105 88.777 26.711 cv
@
88.777 22.27 mo
88.777 24.875 84.867 24.875 84.867 22.27 cv
84.867 19.66 88.777 19.66 88.777 22.27 cv
f
88.777 22.27 mo
88.777 24.875 84.867 24.875 84.867 22.27 cv
84.867 19.66 88.777 19.66 88.777 22.27 cv
@
1.06698 lw
0 lc
86.82 17.984 mo
86.82 17.539 li
@
85.039 17.984 mo
85.039 19.277 li
88.605 19.277 li
88.605 17.984 li
cp
.732937 0 .622614 0 cmyk
f
1 lc
85.039 17.984 mo
85.039 19.277 li
88.605 19.277 li
88.605 17.984 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
85.039 18.41 mo
88.605 18.41 li
@
93.773 22.633 mo
93.773 25.242 89.863 25.242 89.863 22.633 cv
89.863 20.027 93.773 20.027 93.773 22.633 cv
f
.708661 lw
1 lc
93.773 22.633 mo
93.773 25.242 89.863 25.242 89.863 22.633 cv
89.863 20.027 93.773 20.027 93.773 22.633 cv
@
1.06698 lw
0 lc
91.816 17.68 mo
91.816 17.469 li
@
91.816 19.176 mo
91.816 19.305 li
@
90.031 17.68 mo
90.031 19.176 li
93.602 19.176 li
93.602 17.68 li
cp
.709804 0 .277043 0 cmyk
f
1 lc
90.031 17.68 mo
90.031 19.176 li
93.602 19.176 li
93.602 17.68 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
90.031 17.852 mo
93.602 17.852 li
@
98.766 26.656 mo
98.766 29.262 94.855 29.262 94.855 26.656 cv
94.855 24.051 98.766 24.051 98.766 26.656 cv
f
.708661 lw
1 lc
98.766 26.656 mo
98.766 29.262 94.855 29.262 94.855 26.656 cv
94.855 24.051 98.766 24.051 98.766 26.656 cv
@
98.766 21.941 mo
98.766 24.547 94.855 24.547 94.855 21.941 cv
94.855 19.332 98.766 19.332 98.766 21.941 cv
f
98.766 21.941 mo
98.766 24.547 94.855 24.547 94.855 21.941 cv
94.855 19.332 98.766 19.332 98.766 21.941 cv
@
1.06698 lw
0 lc
96.813 17.93 mo
96.813 17.535 li
@
95.027 17.93 mo
95.027 19.09 li
98.598 19.09 li
98.598 17.93 li
cp
.681636 .103883 0 0 cmyk
f
1 lc
95.027 17.93 mo
95.027 19.09 li
98.598 19.09 li
98.598 17.93 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
95.027 18.309 mo
98.598 18.309 li
@
103.762 37.203 mo
103.762 39.809 99.852 39.809 99.852 37.203 cv
99.852 34.594 103.762 34.594 103.762 37.203 cv
f
.708661 lw
1 lc
103.762 37.203 mo
103.762 39.809 99.852 39.809 99.852 37.203 cv
99.852 34.594 103.762 34.594 103.762 37.203 cv
@
103.762 27.137 mo
103.762 29.746 99.852 29.746 99.852 27.137 cv
99.852 24.531 103.762 24.531 103.762 27.137 cv
f
103.762 27.137 mo
103.762 29.746 99.852 29.746 99.852 27.137 cv
99.852 24.531 103.762 24.531 103.762 27.137 cv
@
1.06698 lw
0 lc
101.809 18.988 mo
101.809 18.078 li
@
100.023 18.988 mo
100.023 20.336 li
103.59 20.336 li
103.59 18.988 li
cp
.572045 .344915 0 0 cmyk
f
1 lc
100.023 18.988 mo
100.023 20.336 li
103.59 20.336 li
103.59 18.988 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
100.023 19.398 mo
103.59 19.398 li
@
108.758 22.109 mo
108.758 24.715 104.848 24.715 104.848 22.109 cv
104.848 19.504 108.758 19.504 108.758 22.109 cv
f
.708661 lw
1 lc
108.758 22.109 mo
108.758 24.715 104.848 24.715 104.848 22.109 cv
104.848 19.504 108.758 19.504 108.758 22.109 cv
@
108.758 18.816 mo
108.758 21.422 104.848 21.422 104.848 18.816 cv
104.848 16.211 108.758 16.211 108.758 18.816 cv
f
108.758 18.816 mo
108.758 21.422 104.848 21.422 104.848 18.816 cv
104.848 16.211 108.758 16.211 108.758 18.816 cv
@
1.06698 lw
0 lc
106.801 17.742 mo
106.801 17.508 li
@
105.02 17.742 mo
105.02 18.031 li
108.586 18.031 li
108.586 17.742 li
cp
.354314 .546288 0 0 cmyk
f
1 lc
105.02 17.742 mo
105.02 18.031 li
108.586 18.031 li
108.586 17.742 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
105.02 17.992 mo
108.586 17.992 li
@
113.75 23.496 mo
113.75 26.102 109.844 26.102 109.844 23.496 cv
109.844 20.891 113.75 20.891 113.75 23.496 cv
f
.708661 lw
1 lc
113.75 23.496 mo
113.75 26.102 109.844 26.102 109.844 23.496 cv
109.844 20.891 113.75 20.891 113.75 23.496 cv
@
1.06698 lw
0 lc
111.797 17.852 mo
111.797 17.523 li
@
111.797 18.551 mo
111.797 19.227 li
@
110.012 17.852 mo
110.012 18.551 li
113.582 18.551 li
113.582 17.852 li
cp
.170657 .678828 0 0 cmyk
f
1 lc
110.012 17.852 mo
110.012 18.551 li
113.582 18.551 li
113.582 17.852 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
110.012 18.316 mo
113.582 18.316 li
@
118.746 24.305 mo
118.746 26.91 114.836 26.91 114.836 24.305 cv
114.836 21.699 118.746 21.699 118.746 24.305 cv
f
.708661 lw
1 lc
118.746 24.305 mo
118.746 26.91 114.836 26.91 114.836 24.305 cv
114.836 21.699 118.746 21.699 118.746 24.305 cv
@
1.06698 lw
0 lc
116.793 17.934 mo
116.793 17.551 li
@
116.793 18.871 mo
116.793 19.379 li
@
115.008 17.934 mo
115.008 18.871 li
118.574 18.871 li
118.574 17.934 li
cp
0 .757412 0 0 cmyk
f
1 lc
115.008 17.934 mo
115.008 18.871 li
118.574 18.871 li
118.574 17.934 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
115.008 18.699 mo
118.574 18.699 li
@
123.742 24.219 mo
123.742 26.824 119.832 26.824 119.832 24.219 cv
119.832 21.613 123.742 21.613 123.742 24.219 cv
f
.708661 lw
1 lc
123.742 24.219 mo
123.742 26.824 119.832 26.824 119.832 24.219 cv
119.832 21.613 123.742 21.613 123.742 24.219 cv
@
1.06698 lw
0 lc
121.785 18.023 mo
121.785 17.559 li
@
121.785 19.016 mo
121.785 19.816 li
@
120.004 18.023 mo
120.004 19.016 li
123.57 19.016 li
123.57 18.023 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
1 lc
120.004 18.023 mo
120.004 19.016 li
123.57 19.016 li
123.57 18.023 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
120.004 18.945 mo
123.57 18.945 li
@
156.566 165.145 mo
156.566 167.75 152.656 167.75 152.656 165.145 cv
152.656 162.535 156.566 162.535 156.566 165.145 cv
f
.708661 lw
1 lc
156.566 165.145 mo
156.566 167.75 152.656 167.75 152.656 165.145 cv
152.656 162.535 156.566 162.535 156.566 165.145 cv
@
156.566 159.258 mo
156.566 161.867 152.656 161.867 152.656 159.258 cv
152.656 156.652 156.566 156.652 156.566 159.258 cv
f
156.566 159.258 mo
156.566 161.867 152.656 161.867 152.656 159.258 cv
152.656 156.652 156.566 156.652 156.566 159.258 cv
@
1.06698 lw
0 lc
154.609 220.996 mo
154.609 196.465 li
@
154.609 241.883 mo
154.609 257.25 li
@
152.828 220.996 mo
152.828 241.883 li
156.395 241.883 li
156.395 220.996 li
cp
0 .678187 .511376 0 cmyk
f
1 lc
152.828 220.996 mo
152.828 241.883 li
156.395 241.883 li
156.395 220.996 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
152.828 232.621 mo
156.395 232.621 li
@
1.06698 lw
159.605 119.246 mo
159.605 79.937 li
@
159.605 149.648 mo
159.605 171.305 li
@
157.82 119.246 mo
157.82 149.648 li
161.391 149.648 li
161.391 119.246 li
cp
.115389 .502129 1 .00839246 cmyk
f
1 lc
157.82 119.246 mo
157.82 149.648 li
161.391 149.648 li
161.391 119.246 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
157.82 138.391 mo
161.391 138.391 li
@
166.555 53.383 mo
166.555 55.988 162.645 55.988 162.645 53.383 cv
162.645 50.777 166.555 50.777 166.555 53.383 cv
f
.708661 lw
1 lc
166.555 53.383 mo
166.555 55.988 162.645 55.988 162.645 53.383 cv
162.645 50.777 166.555 50.777 166.555 53.383 cv
@
166.555 48.375 mo
166.555 50.984 162.645 50.984 162.645 48.375 cv
162.645 45.77 166.555 45.77 166.555 48.375 cv
f
166.555 48.375 mo
166.555 50.984 162.645 50.984 162.645 48.375 cv
162.645 45.77 166.555 45.77 166.555 48.375 cv
@
166.555 50.949 mo
166.555 53.555 162.645 53.555 162.645 50.949 cv
162.645 48.344 166.555 48.344 166.555 50.949 cv
f
166.555 50.949 mo
166.555 53.555 162.645 53.555 162.645 50.949 cv
162.645 48.344 166.555 48.344 166.555 50.949 cv
@
166.555 94.82 mo
166.555 97.426 162.645 97.426 162.645 94.82 cv
162.645 92.211 166.555 92.211 166.555 94.82 cv
f
166.555 94.82 mo
166.555 97.426 162.645 97.426 162.645 94.82 cv
162.645 92.211 166.555 92.211 166.555 94.82 cv
@
166.555 96.07 mo
166.555 98.676 162.645 98.676 162.645 96.07 cv
162.645 93.465 166.555 93.465 166.555 96.07 cv
f
166.555 96.07 mo
166.555 98.676 162.645 98.676 162.645 96.07 cv
162.645 93.465 166.555 93.465 166.555 96.07 cv
@
1.06698 lw
0 lc
164.602 74.602 mo
164.602 68.266 li
@
164.602 81 mo
164.602 82.941 li
@
162.816 74.602 mo
162.816 81 li
166.383 81 li
166.383 74.602 li
cp
.31046 .309331 1 .0233768 cmyk
f
1 lc
162.816 74.602 mo
162.816 81 li
166.383 81 li
166.383 74.602 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
162.816 77.57 mo
166.383 77.57 li
@
171.551 86.664 mo
171.551 89.27 167.641 89.27 167.641 86.664 cv
167.641 84.055 171.551 84.055 171.551 86.664 cv
f
.708661 lw
1 lc
171.551 86.664 mo
171.551 89.27 167.641 89.27 167.641 86.664 cv
167.641 84.055 171.551 84.055 171.551 86.664 cv
@
1.06698 lw
0 lc
169.594 130.598 mo
169.594 100.453 li
@
169.594 156.965 mo
169.594 178.449 li
@
167.813 130.598 mo
167.813 156.965 li
171.379 156.965 li
171.379 130.598 li
cp
.58175 .110323 1 .00570687 cmyk
f
1 lc
167.813 130.598 mo
167.813 156.965 li
171.379 156.965 li
171.379 130.598 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
167.813 146.652 mo
171.379 146.652 li
@
1.06698 lw
174.59 166.395 mo
174.59 136.699 li
@
174.59 192.437 mo
174.59 209.762 li
@
172.805 166.395 mo
172.805 192.437 li
176.375 192.437 li
176.375 166.395 li
cp
.777676 0 1 0 cmyk
f
1 lc
172.805 166.395 mo
172.805 192.437 li
176.375 192.437 li
176.375 166.395 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
172.805 180.562 mo
176.375 180.562 li
@
181.539 63.215 mo
181.539 65.82 177.629 65.82 177.629 63.215 cv
177.629 60.609 181.539 60.609 181.539 63.215 cv
f
.708661 lw
1 lc
181.539 63.215 mo
181.539 65.82 177.629 65.82 177.629 63.215 cv
177.629 60.609 181.539 60.609 181.539 63.215 cv
@
1.06698 lw
0 lc
179.586 96.156 mo
179.586 66.254 li
@
179.586 116.805 mo
179.586 134.523 li
@
177.801 96.156 mo
177.801 116.805 li
181.367 116.805 li
181.367 96.156 li
cp
.732937 0 .622614 0 cmyk
f
1 lc
177.801 96.156 mo
177.801 116.805 li
181.367 116.805 li
181.367 96.156 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
177.801 106.359 mo
181.367 106.359 li
@
1.06698 lw
184.578 121.617 mo
184.578 94.086 li
@
184.578 154.621 mo
184.578 179.703 li
@
182.797 121.617 mo
182.797 154.621 li
186.363 154.621 li
186.363 121.617 li
cp
.709804 0 .277043 0 cmyk
f
1 lc
182.797 121.617 mo
182.797 154.621 li
186.363 154.621 li
186.363 121.617 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
182.797 142.797 mo
186.363 142.797 li
@
1.06698 lw
189.574 94.914 mo
189.574 62.637 li
@
189.574 116.879 mo
189.574 134.609 li
@
187.789 94.914 mo
187.789 116.879 li
191.359 116.879 li
191.359 94.914 li
cp
.681636 .103883 0 0 cmyk
f
1 lc
187.789 94.914 mo
187.789 116.879 li
191.359 116.879 li
191.359 94.914 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
187.789 106.305 mo
191.359 106.305 li
@
1.06698 lw
194.57 137.738 mo
194.57 91.148 li
@
194.57 169.363 mo
194.57 193.973 li
@
192.785 137.738 mo
192.785 169.363 li
196.355 169.363 li
196.355 137.738 li
cp
.572045 .344915 0 0 cmyk
f
1 lc
192.785 137.738 mo
192.785 169.363 li
196.355 169.363 li
196.355 137.738 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
192.785 159.797 mo
196.355 159.797 li
@
201.52 76.109 mo
201.52 78.715 197.609 78.715 197.609 76.109 cv
197.609 73.5 201.52 73.5 201.52 76.109 cv
f
.708661 lw
1 lc
201.52 76.109 mo
201.52 78.715 197.609 78.715 197.609 76.109 cv
197.609 73.5 201.52 73.5 201.52 76.109 cv
@
201.52 76.441 mo
201.52 79.047 197.609 79.047 197.609 76.441 cv
197.609 73.832 201.52 73.832 201.52 76.441 cv
f
201.52 76.441 mo
201.52 79.047 197.609 79.047 197.609 76.441 cv
197.609 73.832 201.52 73.832 201.52 76.441 cv
@
1.06698 lw
0 lc
199.566 109.676 mo
199.566 80.848 li
@
199.566 130.426 mo
199.566 143.535 li
@
197.781 109.676 mo
197.781 130.426 li
201.348 130.426 li
201.348 109.676 li
cp
.354314 .546288 0 0 cmyk
f
1 lc
197.781 109.676 mo
197.781 130.426 li
201.348 130.426 li
201.348 109.676 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
197.781 117.121 mo
201.348 117.121 li
@
1.06698 lw
204.559 90.23 mo
204.559 71.781 li
@
204.559 112.906 mo
204.559 124.066 li
@
202.777 90.23 mo
202.777 112.906 li
206.344 112.906 li
206.344 90.23 li
cp
.170657 .678828 0 0 cmyk
f
1 lc
202.777 90.23 mo
202.777 112.906 li
206.344 112.906 li
206.344 90.23 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
202.777 104.793 mo
206.344 104.793 li
@
211.508 37.562 mo
211.508 40.172 207.602 40.172 207.602 37.562 cv
207.602 34.957 211.508 34.957 211.508 37.562 cv
f
.708661 lw
1 lc
211.508 37.562 mo
211.508 40.172 207.602 40.172 207.602 37.562 cv
207.602 34.957 211.508 34.957 211.508 37.562 cv
@
211.508 36.781 mo
211.508 39.391 207.602 39.391 207.602 36.781 cv
207.602 34.176 211.508 34.176 211.508 36.781 cv
f
211.508 36.781 mo
211.508 39.391 207.602 39.391 207.602 36.781 cv
207.602 34.176 211.508 34.176 211.508 36.781 cv
@
211.508 75.441 mo
211.508 78.047 207.602 78.047 207.602 75.441 cv
207.602 72.836 211.508 72.836 211.508 75.441 cv
f
211.508 75.441 mo
211.508 78.047 207.602 78.047 207.602 75.441 cv
207.602 72.836 211.508 72.836 211.508 75.441 cv
@
211.508 77.637 mo
211.508 80.242 207.602 80.242 207.602 77.637 cv
207.602 75.031 211.508 75.031 211.508 77.637 cv
f
211.508 77.637 mo
211.508 80.242 207.602 80.242 207.602 77.637 cv
207.602 75.031 211.508 75.031 211.508 77.637 cv
@
1.06698 lw
0 lc
209.555 53.695 mo
209.555 44.855 li
@
209.555 61.465 mo
209.555 63.152 li
@
207.77 53.695 mo
207.77 61.465 li
211.34 61.465 li
211.34 53.695 li
cp
0 .757412 0 0 cmyk
f
1 lc
207.77 53.695 mo
207.77 61.465 li
211.34 61.465 li
211.34 53.695 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
207.77 59.012 mo
211.34 59.012 li
@
216.504 46.621 mo
216.504 49.227 212.594 49.227 212.594 46.621 cv
212.594 44.012 216.504 44.012 216.504 46.621 cv
f
.708661 lw
1 lc
216.504 46.621 mo
216.504 49.227 212.594 49.227 212.594 46.621 cv
212.594 44.012 216.504 44.012 216.504 46.621 cv
@
216.504 97.293 mo
216.504 99.898 212.594 99.898 212.594 97.293 cv
212.594 94.687 216.504 94.687 216.504 97.293 cv
f
216.504 97.293 mo
216.504 99.898 212.594 99.898 212.594 97.293 cv
212.594 94.687 216.504 94.687 216.504 97.293 cv
@
1.06698 lw
0 lc
214.551 65.437 mo
214.551 49.488 li
@
214.551 77.363 mo
214.551 89.312 li
@
212.766 65.437 mo
212.766 77.363 li
216.332 77.363 li
216.332 65.437 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
1 lc
212.766 65.437 mo
212.766 77.363 li
216.332 77.363 li
216.332 65.437 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
212.766 70.273 mo
216.332 70.273 li
@
1.06698 lw
1 lc
36.16 5.48001 mo
240.238 5.48001 li
240.238 269.238 li
36.16 269.238 li
cp
@
grestore
gsave
281.875 5.48001 mo
486.953 5.48001 li
486.953 270.238 li
281.875 270.238 li
cp
clp
281.875 5.48001 mo
485.953 5.48001 li
485.953 269.238 li
281.875 269.238 li
cp
f
.533489 lw
0 lc
281.875 196.285 mo
485.953 196.285 li
.0627451 .0476081 .0476081 0 cmyk
@
281.875 110.855 mo
485.953 110.855 li
@
281.875 25.426 mo
485.953 25.426 li
@
1.06698 lw
281.875 239 mo
485.953 239 li
@
281.875 153.57 mo
485.953 153.57 li
@
281.875 68.141 mo
485.953 68.141 li
@
337.535 269.238 mo
337.535 5.48001 li
@
430.297 269.238 mo
430.297 5.48001 li
@
307.566 129.051 mo
307.566 122.539 li
.696254 .631098 .620691 .585718 cmyk
@
307.566 143.437 mo
307.566 164.602 li
@
305.781 129.051 mo
305.781 143.437 li
309.348 143.437 li
309.348 129.051 li
cp
0 .678187 .511376 0 cmyk
f
1 lc
305.781 129.051 mo
305.781 143.437 li
309.348 143.437 li
309.348 129.051 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
305.781 135.422 mo
309.348 135.422 li
@
314.516 127.312 mo
314.516 129.918 310.605 129.918 310.605 127.312 cv
310.605 124.707 314.516 124.707 314.516 127.312 cv
f
.708661 lw
1 lc
314.516 127.312 mo
314.516 129.918 310.605 129.918 310.605 127.312 cv
310.605 124.707 314.516 124.707 314.516 127.312 cv
@
314.516 112.66 mo
314.516 115.266 310.605 115.266 310.605 112.66 cv
310.605 110.055 314.516 110.055 314.516 112.66 cv
f
314.516 112.66 mo
314.516 115.266 310.605 115.266 310.605 112.66 cv
310.605 110.055 314.516 110.055 314.516 112.66 cv
@
1.06698 lw
0 lc
312.559 90.719 mo
312.559 79.984 li
@
310.777 90.719 mo
310.777 99.352 li
314.344 99.352 li
314.344 90.719 li
cp
.115389 .502129 1 .00839246 cmyk
f
1 lc
310.777 90.719 mo
310.777 99.352 li
314.344 99.352 li
314.344 90.719 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
310.777 96.457 mo
314.344 96.457 li
@
319.508 84.703 mo
319.508 87.309 315.602 87.309 315.602 84.703 cv
315.602 82.098 319.508 82.098 319.508 84.703 cv
f
.708661 lw
1 lc
319.508 84.703 mo
319.508 87.309 315.602 87.309 315.602 84.703 cv
315.602 82.098 319.508 82.098 319.508 84.703 cv
@
1.06698 lw
0 lc
317.555 45.414 mo
317.555 36.09 li
@
317.555 58.734 mo
317.555 67.387 li
@
315.77 45.414 mo
315.77 58.734 li
319.34 58.734 li
319.34 45.414 li
cp
.31046 .309331 1 .0233768 cmyk
f
1 lc
315.77 45.414 mo
315.77 58.734 li
319.34 58.734 li
319.34 45.414 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
315.77 54.617 mo
319.34 54.617 li
@
1.06698 lw
322.551 100.687 mo
322.551 85.359 li
@
322.551 115.676 mo
322.551 130.629 li
@
320.766 100.687 mo
320.766 115.676 li
324.332 115.676 li
324.332 100.687 li
cp
.58175 .110323 1 .00570687 cmyk
f
1 lc
320.766 100.687 mo
320.766 115.676 li
324.332 115.676 li
324.332 100.687 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
320.766 106.242 mo
324.332 106.242 li
@
1.06698 lw
327.543 82.121 mo
327.543 72.184 li
@
327.543 96.145 mo
327.543 106.895 li
@
325.762 82.121 mo
325.762 96.145 li
329.328 96.145 li
329.328 82.121 li
cp
.777676 0 1 0 cmyk
f
1 lc
325.762 82.121 mo
325.762 96.145 li
329.328 96.145 li
329.328 82.121 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
325.762 85.961 mo
329.328 85.961 li
@
334.492 111.328 mo
334.492 113.937 330.586 113.937 330.586 111.328 cv
330.586 108.723 334.492 108.723 334.492 111.328 cv
f
.708661 lw
1 lc
334.492 111.328 mo
334.492 113.937 330.586 113.937 330.586 111.328 cv
330.586 108.723 334.492 108.723 334.492 111.328 cv
@
1.06698 lw
0 lc
332.539 78.914 mo
332.539 63.285 li
@
332.539 91.219 mo
332.539 100.973 li
@
330.754 78.914 mo
330.754 91.219 li
334.324 91.219 li
334.324 78.914 li
cp
.732937 0 .622614 0 cmyk
f
1 lc
330.754 78.914 mo
330.754 91.219 li
334.324 91.219 li
334.324 78.914 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
330.754 84.98 mo
334.324 84.98 li
@
1.06698 lw
337.535 67.375 mo
337.535 53.461 li
@
337.535 82.023 mo
337.535 94.832 li
@
335.75 67.375 mo
335.75 82.023 li
339.316 82.023 li
339.316 67.375 li
cp
.709804 0 .277043 0 cmyk
f
1 lc
335.75 67.375 mo
335.75 82.023 li
339.316 82.023 li
339.316 67.375 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
335.75 71.289 mo
339.316 71.289 li
@
344.484 109.941 mo
344.484 112.547 340.574 112.547 340.574 109.941 cv
340.574 107.336 344.484 107.336 344.484 109.941 cv
f
.708661 lw
1 lc
344.484 109.941 mo
344.484 112.547 340.574 112.547 340.574 109.941 cv
340.574 107.336 344.484 107.336 344.484 109.941 cv
@
1.06698 lw
0 lc
342.527 76.68 mo
342.527 60.887 li
@
342.527 89.211 mo
342.527 99.016 li
@
340.746 76.68 mo
340.746 89.211 li
344.313 89.211 li
344.313 76.68 li
cp
.681636 .103883 0 0 cmyk
f
1 lc
340.746 76.68 mo
340.746 89.211 li
344.313 89.211 li
344.313 76.68 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
340.746 82.629 mo
344.313 82.629 li
@
349.48 139.129 mo
349.48 141.734 345.57 141.734 345.57 139.129 cv
345.57 136.523 349.48 136.523 349.48 139.129 cv
f
.708661 lw
1 lc
349.48 139.129 mo
349.48 141.734 345.57 141.734 345.57 139.129 cv
345.57 136.523 349.48 136.523 349.48 139.129 cv
@
349.48 126.418 mo
349.48 129.023 345.57 129.023 345.57 126.418 cv
345.57 123.812 349.48 123.812 349.48 126.418 cv
f
349.48 126.418 mo
349.48 129.023 345.57 129.023 345.57 126.418 cv
345.57 123.812 349.48 123.812 349.48 126.418 cv
@
1.06698 lw
0 lc
347.523 100.723 mo
347.523 88.645 li
@
345.738 100.723 mo
345.738 109.719 li
349.309 109.719 li
349.309 100.723 li
cp
.572045 .344915 0 0 cmyk
f
1 lc
345.738 100.723 mo
345.738 109.719 li
349.309 109.719 li
349.309 100.723 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
345.738 104.117 mo
349.309 104.117 li
@
354.473 99.375 mo
354.473 101.98 350.563 101.98 350.563 99.375 cv
350.563 96.77 354.473 96.77 354.473 99.375 cv
f
.708661 lw
1 lc
354.473 99.375 mo
354.473 101.98 350.563 101.98 350.563 99.375 cv
350.563 96.77 354.473 96.77 354.473 99.375 cv
@
354.473 43.816 mo
354.473 46.422 350.563 46.422 350.563 43.816 cv
350.563 41.207 354.473 41.207 354.473 43.816 cv
f
354.473 43.816 mo
354.473 46.422 350.563 46.422 350.563 43.816 cv
350.563 41.207 354.473 41.207 354.473 43.816 cv
@
354.473 78.98 mo
354.473 81.586 350.563 81.586 350.563 78.98 cv
350.563 76.375 354.473 76.375 354.473 78.98 cv
f
354.473 78.98 mo
354.473 81.586 350.563 81.586 350.563 78.98 cv
350.563 76.375 354.473 76.375 354.473 78.98 cv
@
1.06698 lw
0 lc
352.52 57.863 mo
352.52 52.992 li
@
350.734 57.863 mo
350.734 65.457 li
354.305 65.457 li
354.305 57.863 li
cp
.354314 .546288 0 0 cmyk
f
1 lc
350.734 57.863 mo
350.734 65.457 li
354.305 65.457 li
354.305 57.863 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
350.734 64.828 mo
354.305 64.828 li
@
359.469 74.883 mo
359.469 77.488 355.559 77.488 355.559 74.883 cv
355.559 72.273 359.469 72.273 359.469 74.883 cv
f
.708661 lw
1 lc
359.469 74.883 mo
359.469 77.488 355.559 77.488 355.559 74.883 cv
355.559 72.273 359.469 72.273 359.469 74.883 cv
@
1.06698 lw
0 lc
357.516 33.254 mo
357.516 20.477 li
@
357.516 47.762 mo
357.516 54.875 li
@
355.73 33.254 mo
355.73 47.762 li
359.297 47.762 li
359.297 33.254 li
cp
.170657 .678828 0 0 cmyk
f
1 lc
355.73 33.254 mo
355.73 47.762 li
359.297 47.762 li
359.297 33.254 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
355.73 44.305 mo
359.297 44.305 li
@
364.465 68.406 mo
364.465 71.016 360.555 71.016 360.555 68.406 cv
360.555 65.801 364.465 65.801 364.465 68.406 cv
f
.708661 lw
1 lc
364.465 68.406 mo
364.465 71.016 360.555 71.016 360.555 68.406 cv
360.555 65.801 364.465 65.801 364.465 68.406 cv
@
1.06698 lw
0 lc
362.508 30.512 mo
362.508 19.926 li
@
362.508 43.727 mo
362.508 47.559 li
@
360.727 30.512 mo
360.727 43.727 li
364.293 43.727 li
364.293 30.512 li
cp
0 .757412 0 0 cmyk
f
1 lc
360.727 30.512 mo
360.727 43.727 li
364.293 43.727 li
364.293 30.512 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
360.727 42.109 mo
364.293 42.109 li
@
369.457 68.598 mo
369.457 71.203 365.551 71.203 365.551 68.598 cv
365.551 65.992 369.457 65.992 369.457 68.598 cv
f
.708661 lw
1 lc
369.457 68.598 mo
369.457 71.203 365.551 71.203 365.551 68.598 cv
365.551 65.992 369.457 65.992 369.457 68.598 cv
@
1.06698 lw
0 lc
367.504 28.914 mo
367.504 17.469 li
@
367.504 43.23 mo
367.504 49.156 li
@
365.719 28.914 mo
365.719 43.23 li
369.289 43.23 li
369.289 28.914 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
1 lc
365.719 28.914 mo
365.719 43.23 li
369.289 43.23 li
369.289 28.914 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
365.719 42.637 mo
369.289 42.637 li
@
402.281 226.891 mo
402.281 229.496 398.371 229.496 398.371 226.891 cv
398.371 224.285 402.281 224.285 402.281 226.891 cv
f
.708661 lw
1 lc
402.281 226.891 mo
402.281 229.496 398.371 229.496 398.371 226.891 cv
398.371 224.285 402.281 224.285 402.281 226.891 cv
@
402.281 224.059 mo
402.281 226.668 398.371 226.668 398.371 224.059 cv
398.371 221.453 402.281 221.453 402.281 224.059 cv
f
402.281 224.059 mo
402.281 226.668 398.371 226.668 398.371 224.059 cv
398.371 221.453 402.281 221.453 402.281 224.059 cv
@
1.06698 lw
0 lc
400.328 246.648 mo
400.328 239.113 li
@
400.328 252.742 mo
400.328 257.25 li
@
398.543 246.648 mo
398.543 252.742 li
402.113 252.742 li
402.113 246.648 li
cp
0 .678187 .511376 0 cmyk
f
1 lc
398.543 246.648 mo
398.543 252.742 li
402.113 252.742 li
402.113 246.648 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
398.543 249.973 mo
402.113 249.973 li
@
1.06698 lw
405.324 185.348 mo
405.324 166.305 li
@
405.324 200.91 mo
405.324 210.789 li
@
403.539 185.348 mo
403.539 200.91 li
407.105 200.91 li
407.105 185.348 li
cp
.115389 .502129 1 .00839246 cmyk
f
1 lc
403.539 185.348 mo
403.539 200.91 li
407.105 200.91 li
407.105 185.348 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
403.539 195.461 mo
407.105 195.461 li
@
412.273 117.184 mo
412.273 119.789 408.363 119.789 408.363 117.184 cv
408.363 114.578 412.273 114.578 412.273 117.184 cv
f
.708661 lw
1 lc
412.273 117.184 mo
412.273 119.789 408.363 119.789 408.363 117.184 cv
408.363 114.578 412.273 114.578 412.273 117.184 cv
@
412.273 111.738 mo
412.273 114.348 408.363 114.348 408.363 111.738 cv
408.363 109.133 412.273 109.133 412.273 111.738 cv
f
412.273 111.738 mo
412.273 114.348 408.363 114.348 408.363 111.738 cv
408.363 109.133 412.273 109.133 412.273 111.738 cv
@
412.273 114.754 mo
412.273 117.359 408.363 117.359 408.363 114.754 cv
408.363 112.148 412.273 112.148 412.273 114.754 cv
f
412.273 114.754 mo
412.273 117.359 408.363 117.359 408.363 114.754 cv
408.363 112.148 412.273 112.148 412.273 114.754 cv
@
412.273 147.488 mo
412.273 150.098 408.363 150.098 408.363 147.488 cv
408.363 144.883 412.273 144.883 412.273 147.488 cv
f
412.273 147.488 mo
412.273 150.098 408.363 150.098 408.363 147.488 cv
408.363 144.883 412.273 144.883 412.273 147.488 cv
@
412.273 148.375 mo
412.273 150.98 408.363 150.98 408.363 148.375 cv
408.363 145.77 412.273 145.77 412.273 148.375 cv
f
412.273 148.375 mo
412.273 150.98 408.363 150.98 408.363 148.375 cv
408.363 145.77 412.273 145.77 412.273 148.375 cv
@
1.06698 lw
0 lc
410.316 134.113 mo
410.316 129.723 li
@
410.316 138.629 mo
410.316 139.809 li
@
408.535 134.113 mo
408.535 138.629 li
412.102 138.629 li
412.102 134.113 li
cp
.31046 .309331 1 .0233768 cmyk
f
1 lc
408.535 134.113 mo
408.535 138.629 li
412.102 138.629 li
412.102 134.113 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
408.535 136.125 mo
412.102 136.125 li
@
417.266 187.254 mo
417.266 189.859 413.359 189.859 413.359 187.254 cv
413.359 184.648 417.266 184.648 417.266 187.254 cv
f
.708661 lw
1 lc
417.266 187.254 mo
417.266 189.859 413.359 189.859 413.359 187.254 cv
413.359 184.648 417.266 184.648 417.266 187.254 cv
@
1.06698 lw
0 lc
415.313 209.539 mo
415.313 195.109 li
@
415.313 219.402 mo
415.313 226.926 li
@
413.527 209.539 mo
413.527 219.402 li
417.098 219.402 li
417.098 209.539 li
cp
.58175 .110323 1 .00570687 cmyk
f
1 lc
413.527 209.539 mo
413.527 219.402 li
417.098 219.402 li
417.098 209.539 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
413.527 215.738 mo
417.098 215.738 li
@
1.06698 lw
420.309 219.859 mo
420.309 205.953 li
@
420.309 232.07 mo
420.309 240.215 li
@
418.523 219.859 mo
418.523 232.07 li
422.09 232.07 li
422.09 219.859 li
cp
.777676 0 1 0 cmyk
f
1 lc
418.523 219.859 mo
418.523 232.07 li
422.09 232.07 li
422.09 219.859 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
418.523 226.473 mo
422.09 226.473 li
@
427.258 156.137 mo
427.258 158.742 423.348 158.742 423.348 156.137 cv
423.348 153.527 427.258 153.527 427.258 156.137 cv
f
.708661 lw
1 lc
427.258 156.137 mo
427.258 158.742 423.348 158.742 423.348 156.137 cv
423.348 153.527 427.258 153.527 427.258 156.137 cv
@
427.258 158.246 mo
427.258 160.855 423.348 160.855 423.348 158.246 cv
423.348 155.641 427.258 155.641 427.258 158.246 cv
f
427.258 158.246 mo
427.258 160.855 423.348 160.855 423.348 158.246 cv
423.348 155.641 427.258 155.641 427.258 158.246 cv
@
1.06698 lw
0 lc
425.301 175.859 mo
425.301 169.141 li
@
425.301 185.824 mo
425.301 193.613 li
@
423.52 175.859 mo
423.52 185.824 li
427.086 185.824 li
427.086 175.859 li
cp
.732937 0 .622614 0 cmyk
f
1 lc
423.52 175.859 mo
423.52 185.824 li
427.086 185.824 li
427.086 175.859 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
423.52 181.008 mo
427.086 181.008 li
@
1.06698 lw
430.297 187.055 mo
430.297 171.937 li
@
430.297 203.824 mo
430.297 217.891 li
@
428.512 187.055 mo
428.512 203.824 li
432.082 203.824 li
432.082 187.055 li
cp
.709804 0 .277043 0 cmyk
f
1 lc
428.512 187.055 mo
428.512 203.824 li
432.082 203.824 li
432.082 187.055 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
428.512 197.695 mo
432.082 197.695 li
@
437.246 154.941 mo
437.246 157.547 433.336 157.547 433.336 154.941 cv
433.336 152.336 437.246 152.336 437.246 154.941 cv
f
.708661 lw
1 lc
437.246 154.941 mo
437.246 157.547 433.336 157.547 433.336 154.941 cv
433.336 152.336 437.246 152.336 437.246 154.941 cv
@
437.246 157.617 mo
437.246 160.223 433.336 160.223 433.336 157.617 cv
433.336 155.012 437.246 155.012 437.246 157.617 cv
f
437.246 157.617 mo
437.246 160.223 433.336 160.223 433.336 157.617 cv
433.336 155.012 437.246 155.012 437.246 157.617 cv
@
1.06698 lw
0 lc
435.293 174.555 mo
435.293 168.16 li
@
435.293 185.465 mo
435.293 193.5 li
@
433.508 174.555 mo
433.508 185.465 li
437.074 185.465 li
437.074 174.555 li
cp
.681636 .103883 0 0 cmyk
f
1 lc
433.508 174.555 mo
433.508 185.465 li
437.074 185.465 li
437.074 174.555 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
433.508 180.488 mo
437.074 180.488 li
@
442.242 176.801 mo
442.242 179.406 438.332 179.406 438.332 176.801 cv
438.332 174.191 442.242 174.191 442.242 176.801 cv
f
.708661 lw
1 lc
442.242 176.801 mo
442.242 179.406 438.332 179.406 438.332 176.801 cv
438.332 174.191 442.242 174.191 442.242 176.801 cv
@
1.06698 lw
0 lc
440.285 200.492 mo
440.285 187.621 li
@
440.285 214.957 mo
440.285 225.273 li
@
438.504 200.492 mo
438.504 214.957 li
442.07 214.957 li
442.07 200.492 li
cp
.572045 .344915 0 0 cmyk
f
1 lc
438.504 200.492 mo
438.504 214.957 li
442.07 214.957 li
442.07 200.492 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
438.504 210.738 mo
442.07 210.738 li
@
447.238 169.52 mo
447.238 172.125 443.328 172.125 443.328 169.52 cv
443.328 166.914 447.238 166.914 447.238 169.52 cv
f
.708661 lw
1 lc
447.238 169.52 mo
447.238 172.125 443.328 172.125 443.328 169.52 cv
443.328 166.914 447.238 166.914 447.238 169.52 cv
@
447.238 169.75 mo
447.238 172.359 443.328 172.359 443.328 169.75 cv
443.328 167.145 447.238 167.145 447.238 169.75 cv
f
447.238 169.75 mo
447.238 172.359 443.328 172.359 443.328 169.75 cv
443.328 167.145 447.238 167.145 447.238 169.75 cv
@
447.238 172.543 mo
447.238 175.148 443.328 175.148 443.328 172.543 cv
443.328 169.937 447.238 169.937 447.238 172.543 cv
f
447.238 172.543 mo
447.238 175.148 443.328 175.148 443.328 172.543 cv
443.328 169.937 447.238 169.937 447.238 172.543 cv
@
1.06698 lw
0 lc
445.281 187.824 mo
445.281 187.613 li
@
445.281 197.484 mo
445.281 203.437 li
@
443.496 187.824 mo
443.496 197.484 li
447.066 197.484 li
447.066 187.824 li
cp
.354314 .546288 0 0 cmyk
f
1 lc
443.496 187.824 mo
443.496 197.484 li
447.066 197.484 li
447.066 187.824 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
443.496 191.359 mo
447.066 191.359 li
@
1.06698 lw
450.277 153.242 mo
450.277 140.605 li
@
450.277 167.57 mo
450.277 173.926 li
@
448.492 153.242 mo
448.492 167.57 li
452.063 167.57 li
452.063 153.242 li
cp
.170657 .678828 0 0 cmyk
f
1 lc
448.492 153.242 mo
448.492 167.57 li
452.063 167.57 li
452.063 153.242 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
448.492 162.637 mo
452.063 162.637 li
@
457.227 97.477 mo
457.227 100.082 453.316 100.082 453.316 97.477 cv
453.316 94.871 457.227 94.871 457.227 97.477 cv
f
.708661 lw
1 lc
457.227 97.477 mo
457.227 100.082 453.316 100.082 453.316 97.477 cv
453.316 94.871 457.227 94.871 457.227 97.477 cv
@
457.227 96.223 mo
457.227 98.828 453.316 98.828 453.316 96.223 cv
453.316 93.617 457.227 93.617 457.227 96.223 cv
f
457.227 96.223 mo
457.227 98.828 453.316 98.828 453.316 96.223 cv
453.316 93.617 457.227 93.617 457.227 96.223 cv
@
457.227 134.738 mo
457.227 137.348 453.316 137.348 453.316 134.738 cv
453.316 132.133 457.227 132.133 457.227 134.738 cv
f
457.227 134.738 mo
457.227 137.348 453.316 137.348 453.316 134.738 cv
453.316 132.133 457.227 132.133 457.227 134.738 cv
@
457.227 136.371 mo
457.227 138.977 453.316 138.977 453.316 136.371 cv
453.316 133.766 457.227 133.766 457.227 136.371 cv
f
457.227 136.371 mo
457.227 138.977 453.316 138.977 453.316 136.371 cv
453.316 133.766 457.227 133.766 457.227 136.371 cv
@
1.06698 lw
0 lc
455.273 117.078 mo
455.273 107.758 li
@
455.273 123.984 mo
455.273 125.426 li
@
453.488 117.078 mo
453.488 123.984 li
457.055 123.984 li
457.055 117.078 li
cp
0 .757412 0 0 cmyk
f
1 lc
453.488 117.078 mo
453.488 123.984 li
457.055 123.984 li
457.055 117.078 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
453.488 121.883 mo
457.055 121.883 li
@
462.223 112.008 mo
462.223 114.613 458.313 114.613 458.313 112.008 cv
458.313 109.402 462.223 109.402 462.223 112.008 cv
f
.708661 lw
1 lc
462.223 112.008 mo
462.223 114.613 458.313 114.613 458.313 112.008 cv
458.313 109.402 462.223 109.402 462.223 112.008 cv
@
462.223 108.641 mo
462.223 111.246 458.313 111.246 458.313 108.641 cv
458.313 106.035 462.223 106.035 462.223 108.641 cv
f
462.223 108.641 mo
462.223 111.246 458.313 111.246 458.313 108.641 cv
458.313 106.035 462.223 106.035 462.223 108.641 cv
@
462.223 150.895 mo
462.223 153.5 458.313 153.5 458.313 150.895 cv
458.313 148.289 462.223 148.289 462.223 150.895 cv
f
462.223 150.895 mo
462.223 153.5 458.313 153.5 458.313 150.895 cv
458.313 148.289 462.223 148.289 462.223 150.895 cv
@
1.06698 lw
0 lc
460.266 127.371 mo
460.266 119.98 li
@
460.266 136.383 mo
460.266 145.223 li
@
458.484 127.371 mo
458.484 136.383 li
462.051 136.383 li
462.051 127.371 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
1 lc
458.484 127.371 mo
458.484 136.383 li
462.051 136.383 li
462.051 127.371 li
cp
.696254 .631098 .620691 .585718 cmyk
@
2.13396 lw
0 lc
458.484 131.16 mo
462.051 131.16 li
@
1.06698 lw
1 lc
281.875 5.48001 mo
485.953 5.48001 li
485.953 269.238 li
281.875 269.238 li
cp
@
grestore
.653895 .581659 .568902 .37409 cmyk
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000a000a000a000a637674201d6402d7000000ac000010846670
676d6d591b530000113000000a59676c796636d1e58400002c8800004a70
68656164ec6c40fe00001b8c0000003668686561134d083500001bc40000
0024686d747877c706ba00001be8000000746c6f636100040e2400001c5c
000000786d61787006e508b500001cd40000002070726570b33292910000
1cf400000f9367646972000000000000000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f03d703f104700000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000160016001700180018001a001b00210029002a002a002c002d002e
002f003200340036003700380039003a003b003c003d003e004200460046
004a004c004d004f004f00530053005500570059005c005c005d005d005e
005f0061006400650067006800690069006b006e006f0071007600760077
0077007d007e007f008000810082008600870087008a008d008e00960096
00970097009c00a000a200a300a600ac00b300b300b600b800b900be00bf
00c100c200c400c500c600c700ca00ca00cb00cc00cc00ce00d100d200d3
00d700da00db00dc00de00df00e000e000e300e640578574737271706f6e
6d6c6b6a6968676665625d55544f4e403f3e3d3c3b3a3938373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b017
2370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b0
1923442d2c2045b00325456164b050515845441b2121592d2cb001436323
62b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb012
43588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720
b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212110592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b8
02b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2c014b53234b515ab00225b00425b006254923451869525a58b0
0225b00225b00525462345696048592121212d2cb0134358031b02592d2c
b0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b010
60482046b0106048590a21211b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b8fff060482046b8ff
f06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b
53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b21
21592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b212159
2d2c462346608a8a462320468a608a61b8ff8062232010238ab903580358
8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c23
20b000508a8a64b10003255458b0401bb10103255458b037438b59b04f2b
5923b0622b2321235865592d2cb13a000c215460432d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b2020202436042b12401885458b202200243604200
4b014b5258b2020802436042591bb940000080885458b202040243604259
b94000008063b80100885458b202080243604259b94000010063b8020088
5458b202100243604259b12601885158b94000020063b80400885458b202
400243604259b94000040063b80800885458b202800243604259b1280188
5158b94000080063b81000885458ba000201000002436042595959595959
59b10002435458400a37403a403b403e023f021bb10102435458b237403a
ba0100003b0100b33e013f011bb18002435258b237403ab80180b13b401b
b901000002435258b237403aba0180003b01401bb901800002435258b237
403ab80200b13b401bb237403aba0100003b0100595959b9400000808855
b94000020063b8040088555a58b33e003f011bb33e003f01595959424242
42422d2cb0024354584b53234b515a58381b2121591b21212121592d2c01
2d2cb0022563b0206066b00225b82000626023622d2c234ab1024e2b2d2c
234ab1014e2b2d2c238a4a234564b0022564b002256164b0354352582120
6459b1024e2b23b000505865592d2c238a4a234564b0022564b002256164
b03543525821206459b1014e2b23b000505865592d2c20b003254ab1024e
2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b
8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b0
04252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b0
0325466061b08062208a2010233a232010233a2d2cb0032547b003254760
b0052547b0806361b00225b00625496323b005254ab080632058621b2159
b0042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e
2b208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb080
5020605920606020b001515821211b20b005515821206661b0402361b100
032550b00325b00325505a5820b00325618a535821b000591b21591bb007
54582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab0
005358b0001b8a8a238ab00159b004254620666120b00526b0062649b005
26b00526b0702b236165b02060206661b02061652d2cb0022546208a20b0
00505821b1024e2b1b452321596165b00225103b2d2cb0042620b8020062
20b80200638a236120b05d602bb00525118a128a20398a58ba005d100000
04266356602b23212010204620b1024e2b23611b2321208a201049b1024e
2b593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb1
5d0725602bb00525b00525b00525b00525b06f2bba005d10000008266356
602b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb002
1738b00052b00225b001525a58b00425b0062549b00325b00525496020b0
405258211bb000525820b0025458b00425b00425b00725b0072549b00217
381bb00425b00425b00425b0062549b0021738595959595921212121212d
2cb12501885058b94000020063b8040088545cb0134b525b1bb001592d00
00000001000000070000b121c9ef5f0f3cf50819080000000000a2e31dc2
00000000d684d860fb74fd8c105e08510000000900010001000000000001
00000721fe4500571000fb74f9d2105e0001000000000000000000000000
0000001d0639011c040000200400004a040000580400007c040000f00556
0022038d004c0400000c0239003c040000110400004502aa000d04730022
038d00460239001402000000038d0049055600230239003d04000011031d
0064071d00220400004405c7ffe505c7000b04e3002905c700230400001b
0000000000000098000001d80000032c000004d800000718000008180000
0b8c00000fa4000013400000161c00001ac000001d4c00001fa0000021d4
00002460000026e0000026e000002b1c00002e0800003000000033580000
385400003aec00003de8000040580000428c000043d40000458800004a70
00010000001d02b5003c00d100070002001000400086000005e904eb0005
0002410a005403ef02ad001d001f03ee03ed003c001f03edb2061d1fb803
ecb3032a1f3f411503e4006003e9009f03e500df03e50004001003e40010
03e5003f03e5007003e400ff03e40005ffc003e1b345453240b803e1b32b
2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc0
03dfb2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb3
2a2d32df410a03de00ef03de000203de03df0028001fffc003dfb3282e32
f0410d03df0001037e000f0101001f00a003dd00b003dd0002004003dab3
2426329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03c703
b70012001f03b603b50064001fffc003b5b30e1132004173038d000100c0
038d00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a700af
03a70004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a5
0001000f03a5002f03a5006f03a5008f03a50004005403aa0001006b03aa
000103a8036a0022001f038c03940015001f038b03930015001f03a40393
001a001f03a20394001e001f03a10393001e001f039f0394001e001f039b
0394001a001f039a0393001e001f039903940016001f039803940016001f
03970393001b001f03960394001b001f03950393001b001f03760375001a
001f03740375001a001f03a00373b21e1f10411e03930020039300300393
000300200394003003940040039400030000039400010383036c001e001f
03b1036c0032001f036d036c0032001fffc0037db2212332b9ffc0037db3
171932a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb2212332
b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0037c00040030
0373004003730002000003730010037300200373000300e0037300f00373
000200b0037300c0037300d003730003008403730090037300a003730003
0377036a0029001f0389036ab2281f40b80367b33940323fbb0366000100
400366b3191d328fbb0366000100400366b3090a3240b80366b3090e3240
b80366b3090f323fbb0365000100400365b3090c3240b80365b31a1d3240
b80365b3090e326b410e0363007b03630002001403630024036300340363
0044036300040363b2242f1fba034e006d0800400e1f7f027f037f047f05
0430440112bf033200500800001f0012032d003c0800b61f5f3c013785a0
41850362000100000362001003620070036200900362000400f0035f0001
0020035e0020035f0030035f0040035e00040000035e0000035f0010035f
00d0035e00e0035f00050010030f0020030f0030030f00d0030f00e0030f
00050000030f0010030f0050030f0060030f0070030f00d0030f00060000
030f0010030f0020030f0030030f00e0030f00f0030f0006030f00270000
030e0030030e000200e0030e00f0030e0002030e004a00e0030d00f0030d
0002030d002700d002fc0001001002fc002002fc005002fc000300d002fc
00e002fc0002000002fc001002fc002002fc003002fc005002fc006002fc
000600e002fc00f002fc0002002002fc003002fc004002fc000302fc402c
27c02901b02901a02901902901403c3f413240223f4132121212858f4caf
4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532
b8ffc0b5b2191a32370f413b02af0001005f02af009f02af00df02af0003
001f02af002f02af003f02af006f02af000402af02af001f02ad002f02ad
003f02ad004f02ad005f02ad000500df02ad0001000f02ad001f02ad003f
02ad005f02ad009f02ad0005005f02ad00df02ad0002000f02ad001f02ad
003f02ad0003004002acb23a334f414d02ac005f02ac009f02ac0003002f
02ac003f02ac0002000f02ac003f02ac00af02ac000300b002ac00e002ac
0002004f02ac005f02ac00a002ac0003001f02ac002f02ac003f02ac0003
000f02ac0001000f035a0001000f035a001f035a003f035a005f035a0070
035a000500cf035700df03570002000f0357001f03570070035700af0357
0004035a035a0357035702ad02ad02ac02ac032c400d31151f0016160000
00121108104110020c004a000d01a8004a000d0198004a000d0189004a00
0d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe02280041
000d01940041000d0121400b410db4410d4f410d29410d41100217002100
0d02150021000d02060021000d01eb0021000d014e0021000d012c401421
0df9210df3210df1210d9d210d71210d3d210d4110021c001f000d021400
1f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f0d
571f0d371f0d410d019e0141000d00420141000d001e0141000d001b0141
000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c291f
b801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc01
f9010f0101001f01f6b224e41f411501f401490401001f01f30149040100
1f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c81
1f411501a3010f019a001f01a200220801001f01a100500401001f019f01
49019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a00
2c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb225
9e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c01
0f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144b2
2c791fb80143b223311fb80127b23c811fbc012300500101001f011fb223
e41f4115011d0023019a001f011c00230801001f011b00250801001f010e
010f0401001f010d00220401001f0108b223811fb80106b425e41ff73cbb
0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b90149
0401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21fbf
2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21fa5
23b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f00
6d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb80125400a
1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb61f
2a24e41f2623b80156b41f35555537ba023500070175402c077407620756
0751073b0733072d0720071d071c071408120810080e080c080a08080806
0804080208000814b8ffe0402b0000010014061000000100060400000100
0410000001001002000001000200000001000002010802004a00b013034b
024b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b1
01018e59b0382bb00288b801005458b801ffb101018e851bb0124358b900
01012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b801
0a515ab0052342180016763f183f123e113946443e113946443e11394644
3e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b181d42b0964b5358b235aaaa1d4259b0324b
5358b235ffff1d42594bb04753205c58b90271026f4544b90270026f4544
5958b9017a0271455258b90271017a4459594bb04753205c58b900220270
4544b9003c027045445958b901b30022455258b9002201b34459594bb04c
53205c58b9014900224544b1222245445958b901c20149455258b9014901
c24459594bb06753205c58b9002402714544b90050027145445958b9021e
0024455258b90024021e4459594bb8020153205c58b9010f00224544b122
2245445958b90c00010f455258b9010f0c004459594bb01c53205c58b125
254544b12c2545445958b13725455258b125374459594bb0ab53205c58b1
25254544b1232545445958b901590025455258b9002501594459594bb801
0153205c58b125254544b1282545445958b902080025455258b900250208
4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b01b361dc6463456523456023456560234560b08b766818b080
622020b164dc4565234520b003266062636820b003266165b0dc236544b0
64234420b161634565234520b003266062636820b003266165b063236544
b0612344b10063455458b163406544b26140614523614459b3a67f434b45
6523456023456560234560b089766818b080622020b1437f4565234520b0
03266062636820b003266165b07f236544b043234420b1a64b4565234520
b003266062636820b003266165b04b236544b0a62344b1004b455458b14b
406544b2a640a645236144594b5242014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba04
0001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400
000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b
59b0102342b0112342002b00184569444569444569444569447373737473
7373737475752b7373747475184569447373742b4bb021534bb046515a58
b03cb03c45b040604459012b2b2b2b75752b5840365f235f255f285fa504
6f236f256f286fa5044f234f254f284fa5043f233f253f283fa5042f232f
252f282fa5041f231f251f281fa5047575757575755943584010bf3ccf3c
026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f227f22
8f229f22af2206757559435c58b6403c9f22ef220375592b2b0174747474
454473737474757545447345447374454473747573737373732b58402460
09700980090310092009300940095009056f037f038f03031f032f033f03
4f035f0305b8ffc0b2073a33b8ffc04046063a33900ba00bb00bc00bd00b
05b006c006d006e006f0060520063006400650066006700680069006a006
099006900702600b700b800b03100b200b300b400b500b051f0701007575
75737575752b2b757575751b40100706441f0b0a441f0302441f0908441f
2b2b2b2b592b752b435841220063032d00010003032d0013032d0023032d
0033032d0053032d000500c3032d00d3032d00e3032d00f3032d00040083
032d0093032d00a3032d00b3032d0004032d032d4518694474747575592b
4358b900180332b330353238b80332b361663238b80332b3535a3238b803
32b3454e3238b80332b33c413218b80332b23f330a410f0332000100ba03
3200ca033200da033200ea033200fa03320005033203324518694474752b
2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b
2b017373737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b
2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073730173742b2b
2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b002b2b2b2b00
00>
[15849 3209 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 152 1 <00020020000003b90568000a000d0103b0852b584028160d010f00450d40
0f03400f012a0c011507010206010309050601040c0b0d00040c0d04060c
0d0db8011c401207081407070808030407060c08001f0d010dbb019c0006
000b019f400d050106090806060805040c0c04bb0149000300080166400b
09090f03019f03af030203b801f74018013f0001001a000f01600fa00fe0
0f030f0640070107190eba018e010100182b4e10f4713c105d71f65d3c4d
f45d713c10e610fd3c003f3f392f103c103c10ed10fd723c113911390111
1239872e2b047d10c4011112390f0f0f313000725d015d71721bb50c0408
020d06b80817400a6c070a0d0d040805040c00183f3f12392f33332b3211
1239303159011523112311213501331123110103b9b6a5fdc202756ea5fe
2401f48efe9a0166800382fc8c02a1fd5f000000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 472 2 <0002004affe803b705680010002400dbb0852b58b2610820b80106b20505
15b80106b20d0d1ab8010f4012091a002640260240266026a026e0260426
11b8010f400e5f006f007f008f00a00005001925ba011e010100182b4e10
f45d4ded4e105d71f64ded003fed3fed31304379404c0124232422240206
02010301020607251c1b1d1b1e1b030613260f250b261819171902062104
1162001f061a6201140e116200160c1a620124012062011b082062011210
156200190a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811bb10520
b807eab46c05050d15b807e9b26c0d0d00183f2b3f2b3031591334123736
333217161114020623222726371017163332363736113427262726232207
06024a8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44
354834029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139
e89b7330213d53fe9c00>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 812 3 <00020058ffe803b1056800180028012bb0852b58402a7509760a770e8209
d925e925060603017d037a047a168517043c082806050323192819060320
5f080108b80143b620260126260f01b8018db318000520b80106b30f0d01
00ba01400023010f40120b1a002a402a02402a602aa02ae02a042a19ba01
3e001b010f4012001310132013301340139013a01307131929ba011e0101
00182b4e10fc5d4dfde44e105d71f64dedf43c003fed3f3ced12392f5ded
721217390111121739b10602435458b40b061b0602005d5931304379402c
1c2509121d1c1e1c020611250d2625092362011f101b6200210e23620124
0a2662011c12206200220c206200002b2b2b012b2b2b2b2b2a8181005d01
715d1bb10826b807f5b56c08080f1801b807d8b46c18050f20b807e3b26c
0f0d00183f2b3f2b12392f2b30315901150e030736333216151407062322
272611341224363301061514161716333236353426232206039684a7a36b
2490918bcc677ccc8b61be92010ff86bfdcc12474633495789887d265705
68250d4fa2c78963e0b0aa8caa5cb3011db60148fe58fd44875360e1422f
a498abfa20000000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 1240 4 <0003007cffe8038a056800190026003301a4b0852b5840ba59010109331f
332a276f337a22800b800c801a801b822580268a33a918a51aa725b30cb4
1ab726bb27c50ac50bd70d1607000a01060d021a0927160d171a250d250e
4b018c01830d850ea9000e3b003a014b004b0149285f015b275c336a006a
01690267266a2768337b017c27762c7c338f048f0580078008821182128f
148f1698049608941196129b16a626ad27ad33b804b608e90bea0ce90ee9
27e93229070d09273a0039013832054408000c1a2704000c1a2704101720
b80106b206052db80106b2130d1d4109010f00090140000901400030010f
001001664010003540350240356035a035e035043523bc010f0003013e00
2a010f400a30174017901703171934ba01ee01e900182b4e10f45d4dedf4
ed105d71f6ede4f4ed003fed3fed111217390117393130437940322b2f1e
2211160408152521052362001f071d62012c142a62002e12306201220420
62011e082062012b162d62002f112d6200002b2b2b2b012b2b2b2b2b8181
818101715d00715d00721bb71a0c002704130620b807e5b46c0605132db8
07e1b26c130d00183f2b3f2b121739303159012626353436333216151406
071617161514062322272635343625363635342623220615141617130606
151416333236353427260189a15dcca9a4c86cabb0394cdab1c16c567901
3178407666668035313653508d6d6c82264702ab84a05684bfb2724c9e6b
884e66718fcb7961735ab1d66c7d4f6977764f34682ffee746a560819b7a
5748396a0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 1816 5 <000100f0000003060568001600b2b0852b58401440186018a018e0180400
1840180276008600020e411301690141000901a000220003016901410008
01a00023000001f8000f016900160141000001f2400e010f0f0209020105
09080c020300ba01f70003014940120e0e0f401135300f7f0f900fa00f04
0f1917ba022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c1112
3901113900f5edfc01f52b2b3130005d01715d1bb4010507090ab803e2b2
6c090c00183f2b323f30315913253311141616171521353e023511342726
26232207f0014a21133c5cfe026038160a07251a254204c7a1fb8772381e
022525021d317a02dc942a201e1f0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
FAAAAA+TimesNewRomanPSMT /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
end
FAAAAA+TimesNewRomanPSMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
pop
end
%ADOEndSubsetFont
/WXTHQQ+TimesNewRomanPSMT /FAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/WXTHQQ+TimesNewRomanPSMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 250{/.notdef}rp]
WXTHQQ+TimesNewRomanPSMT nf
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
22.4258 246.234 mo
(\001\002)
[4.4 0 ]xsh
22.4258 170.941 mo
(\003\002)
[4.4 0 ]xsh
22.4258 95.6484 mo
(\004\002)
[4.4 0 ]xsh
18.0273 20.3555 mo
(\005\002\002)sh
0 lc
33.418 243.32 mo
36.16 243.32 li
.696254 .631098 .620691 .585718 cmyk
@
33.418 168.027 mo
36.16 168.027 li
@
33.418 92.734 mo
36.16 92.734 li
@
33.418 17.445 mo
36.16 17.445 li
@
.653895 .581659 .568902 .37409 cmyk
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
272.547 241.914 mo
(\005)sh
268.145 156.484 mo
(\005\002)
[4.39999 0 ]xsh
263.746 71.0547 mo
(\005\002\002)sh
279.137 239 mo
281.875 239 li
.696254 .631098 .620691 .585718 cmyk
@
279.137 153.57 mo
281.875 153.57 li
@
279.137 68.141 mo
281.875 68.141 li
@
91.816 271.977 mo
91.816 269.238 li
@
184.578 271.977 mo
184.578 269.238 li
@
.653895 .581659 .568902 .37409 cmyk
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WXTHQQ+TimesNewRomanPSMT gcheck setglobal} if
1 2072 6 <00030022000004e6054c001e002b003802ceb0852b5840305a005a1e8900
881e8933991a9d27ac1aac27e91aea27e72f0c38007a2779339a329933a5
24aa33d81ad827d8280a043ab802e7b30f67363ab8ffc0b31c22343ab8ff
c040e31517343340212c343340191e34324023283432401b1d3444244425
891ad901d624da33e52507042401250d32100315061b1a141e1624162815
302e3245244a34570158195a279602111000103a55015a24603a703a803a
a03a081a301a3250000310071a241e28192f040602031e171e4f3388249a
24d93307203a403a503a6302630360056006600760307606731a731b701e
742473277a288406861b861e8f33803aca2fda2feb24fa241959080f1f1b
092122101f1b16212333240003042c00352b1f24032229382c33032e2228
353509162928171716022e280808090890260126b8ffc0b23a3526b8ffc0
b2423526b8ff80b33f413426b8ffc0b343463426b8ffc040144235264c5f
1c010a1e301c021c55042b1f382c31b8ffc040104535124004a004020004
a004e0040304b8ffc0400a0d113400040120040104b801d140252c061313
02552c0c0f0f02552c0c0d0d02552c22100f0e0f1002550f200d0d02550f
9e393abc01d100210061011800182b2b4ef42b2b3c4ded2b2b2bfd5d712b
5d714358b90031032de91bb90031032ded592b103c3c3c10f45d72ed2b2b
2b2b2b72003f3c10ed3f3c10ed1112392fed121739111217391139011112
17392b2b3130437940412f342328181e01071a1b191b0206062624250225
332628182633012f07313301231e2633033401313303271b29330130052e
3300251d2233001e32033533010100103c2b3c2b2b2b012b2b2b2b2b2b2b
2b2a81818181015d7101727272007271002b2b2b2b012b2b2b005d005d1b
b2002235b807ecb56c222209162bb807f6b26c1629b807eab26c1615b803
e2b46c1602092cb807fdb26c092eb807ebb26c090ab803e2b26c09080018
3f2b2b2b3f2b2b2b12392f2b393031590116171615140606232135333237
363511342726232335213217161615140625161633323636353426232207
1116333236353426262322060703b28d466180dfe5fd80335525171d274d
33024aa463969e7cfd7b255f3992934ec2ba64507471b5be56c28f3e581b
02b41e425c8565b95525362372036c7e212c251824b77766a10f07073f82
4d77a816fb6f1ba3784f92540405>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 2956 7 <0002004cffe4035303b00014001d03b4b0852b58b1020243545840280816
1415000c0f100255000e0c0f1002550e0c0d0d02550e1530400001200030
0002000010000200b8ffc0b41314025500b8ffc040111111025500000b1b
251107000710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ff
d6b41314025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed
12392f2b2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d
158000a000b0000320003000400003000010000200000b1b2511070807b8
ffc040241010065510072007b00703000760078007a00704079204a204b2
040304310b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655
000c0f0f0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd
2b2bc01112392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31
301b4019125f185d1960006014d6030519201c3917201c3916401c391fb8
ffc0400a434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e34
1b06190958135e165f175a185b1a07010309060709080c0515490689028c
06870c8a10851da302ab18b513d402d90fda10f402f30313126007600870
0780078909c107c80ff007080401070d84020309baffe00006ffe0404a36
09460247094f1f5402540962027202891389199913a409a40ab808b509b0
0ac702e702e00cf40a1408d007010007d007027107010007100720079007
a007b00706077d041400301615b8ffc040131239125f157f159f15df1504
15151bd3040104b8ffd0b2143904b8ffe8b2133904b8ffd8404812390431
0b0b5c1b011b25110707cc0816281b390f16016f167f168f160316f41414
800801300890080230088f08df08031008400860087008b008e0080608aa
0e15040089000200b8032c4012300e400e500e03000e100e200e03f00e01
0eb8ffc04009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d
715d713c10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15
015d592b3cfd3c10f45d5d7172393130015d00383800715d014358b40600
010202715971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c40
2d390d402d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ff
c0b21b3908b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2
093908b8ffc0400e093915101939192011390d201139002b2b012b002b2b
2b2b2b2b2b2b2b2b2b2b5959591bb507070b111500b807e5b56c15150b11
1bb807ebb46c11070b04b8081fb26c0b0b00183f2b3f2b12392f2b111239
2f3031591306171633323637170606232202353412333216152521262726
26232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701a805101963
365383023bcc747463781489e10101d9eb0107cbaa3a582438408100>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 4004 8 <0001000c000003f703af00330304b0852b58b10202435458401735401212
0255300c10100255310c101002550e080f1623b8ffea402e10100255231d
242908080d0d025508040f0f025508060c0c025508162412120255161a0d
0d0255160c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ff
ee40260c0c025516001d040f0f02551d080d0d02551d060c0c02551d2918
12120255290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8
fff6b40d0d025529b8fffa400a0c0c025529001c022430b803e240093140
0910025531320dbe03e2001003e2002203e2002503e24009240f2432071a
2c0207003fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2b
dd2b2b2bc02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b
1bb10602435458405e2f1610100655300c10100655311610100655001c02
24303132071a2c02070f24080c0d0d065508021010065508060f0f065508
16020d0d065516021010065516080f0f065516163534001d0c0d0d06551d
080f0f06551d02101006551d29b8fff0b40d0d065529b8fff0b410100655
29b8fff2b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b
2b2bcd2b2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a
350835600d5d3630355035603570359035052d0401403560357035803590
35b03506b035d03502b0350160358035c035031d0816291e0fb8030f4011
2229291e244a2208291e0e4a231d291e23b8030e402e2331272a41301e31
441c00233233071a2c02072423230f0f0e0a17162407900801b008010f08
70089f08cf080408b802bd401b29331d242a1f2950296029702904802990
29b02903002910290229b8ffc04009141634296034a67f182b10f62b5d71
723cfd3c10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01
f52b2b2b2b3130437940121819030604251903171c01050618051a1c012b
01103c2b2b8181015d71015d71005d01722b2b59591bb532070f0a021ab8
080c40096c020722100d032425b803e2b46c0f0a240a00183f3f2b17323f
2b3f3f303159013633321617161511141716163315213533323637363511
34262322071114171616331521353332363511342626232207272533014b
a1924b6c20160e0b3142fe3b1340330a04414d77760b0e314bfe3b144631
0f1f1a1c270f01142b02edc24b563c7cfe79571f191c242427260f4f0177
7d7182fe1d5d161d1b242447640154a5481a0f2470000000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 4928 9 <0002003c00000207058e000b0022026fb0852b58b10202435458b90024ff
c0401d0d0d0255120d080d0d02550d21181010025521180f0f0255211318
0309b8ffeeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8
ffceb610100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ff
e0b40f0f025518b8ffd6b5101002551820b803e240174f216f217f210321
226f00010060060106400f0f025506b8ffc0b71313025506220613002f3f
d62b2b5dcd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102b
c43130012b1bb10602435458400d20121010065521121010065506b8ffc0
b44b4b065506b8ffc0b44141065506b8ffc04019373706554006010006a0
060260060106000020212207130309b8fff6401c10100655090924230d02
101006550d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6
b40f0f065518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b11
12392f2bcd002f3fddcd3fcd5d71722b2b2b3130012b2b1b401990240160
2470249024a024f024052024502402402450240224b8ffc0b332323424b8
ffc0b3383a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a
3418291e134a220d291e124a2321271941201e21440c190c139006010639
0000220c0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b
0c0c0d190d2418402b3918b8ffc0401a363a349018015018016018701890
18a018f0180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72
003f3c3f3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d71
5d017259591bb900060831b74000002207111314b803e2b26c130a00183f
2b323f3f1aed303159013216151406232226353436131114161633152135
323636351134272626232207272501292a3b3b2a2a3c3b7e193141fe4343
2e1b09071e1a1c280e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c2424
1a3c550161952c20190f2470>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 5660 10 <000100110000040c058e003703f9b0852b58b10202435458402b1a0c1010
0255190c10100255200c0d0d0255110c0d0d0255010c0d0d0255200c0d10
02551f160d10025526b8ffe8b40d0d025526b8ffe8402b10100255262136
272e1f0121080d0d025521040f0f025521060c0c0255212e0e131302552e
16121202552eb8fff6b40d0d02552eb8fff4b40f0f02552eb8ffeeb41010
02552eb8fffe40100f0f02552e1001111f04260a171a2528b8ffe8b40d0f
025528bb03e20026003503e240123640090d025536370026190c0c0d0d02
550cb803e2b6090c0d0f025509b803e2b10a06003fed2bed2b2f2f3fdd2b
ed10fd2bc0c0c011121739012f2b2b2b2b2b2bdd2b2b2bc0c610c4c610c4
2b2b3130002b2b2b2b2b012b2b1b40b90f391f3902120610010610019309
950a900b900c9b0f9a119b129a1f9f39b30a0a3919391a5f105f115f1f6c
106f116f1f9b0209eb1eed1f028009810ec603c60fe902e90fed11ef1208
3f113f183f1f38203f39460f720a750f082f022a10202520262f39380138
100715105501521054200423105701570fe610f510054911481fc209c20a
e30a05170916101f1d1f1f4502420f060b110f130d1a0c1d0f1e0e1f0653
035504530559105411541306190f1d1d1e1f530204b10602435458402f36
1810100655200110030a27353637007c0c010c7b0901090a0619270c0c39
3801210210100655210c0f0f0655212eb8ffe6b4101006552eb8fff0b40f
0f06552eb8fffab70d0d06552e2e39381112392f2b2b2bdd2b2bc0111239
2f002f2f3fcd5dcd5d3fddcd111217393130012b1b4055100f0102111213
1310191f1a1e192e291e2727220a02091e0a21291e26272336272f41351e
3644002f000b13101024201f14200102201f0f1010300102140101020120
00201f13010427020f0a1010180a37000017b801ec404c180ccc0b0b0a06
2726261919180a0b300c800c02f00c01d00ce00c02700cc00c020c2f1717
9f1801181a1f39013921242e00242f2f002e102eb02ec02ed02e05502e01
802e902e022e603839b80178b321a66e182b2b4ef471725d3c4d10ed10ed
4e1072f65d3c4d10f45d5d5d713c003f3c103c103c3f3c10ed10ed3f3c19
1112392f12393912173901103c3c870e2e182b0e7d10c487082e182b0e7d
10c4001112391810f5edfc01f52b10ed0110c02b10ed0110c0870e7d10c4
c4070759313001727271715d005d72015d5d5d5d5d5d00710071435c58b9
0010ffe84014120b3f1f281239012812391d400f391f280f3902b8ffc0b2
0b390bb8ffc0b211390fb8ffc0b2113909b8ffc0b211390cb8ffc0b11139
012b2b2b2b002b2b2b2b2b012b59015d591b400b01102003270a37000c0a
09b803e240096c0a06251a16032728b803e2b36c19270a00183f332b1732
3f2b323f1112173930315901113736373635342627352115060607071316
171617163315213536363534270111141616171521353237363736351134
26262322072725014fe94a0c082126018e526d41ebeb62223024193efe43
261b28fee7192e4dfe2e4623150b0f0e201a152a110110058efc71d44412
0c0c141d022020022e3bd9fed77b212f0e0a242401151317330167fed059
3818012424110b17215103429f471b112370>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 6848 11 <00020045ffe403b903af000f001d022db0852b58b10202435458401c140c
06101002550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b4
1010025504b8fff440130b0b0255040c0f0f0255041725080b1025000700
3fed3fed012f2b2b2bcd2f2b2b2b2bcd31301bb106024354584009102500
071725080b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f0655
0c100d0d06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f1139
2f2b102b2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501
c909c41dd9090612e70a0148094516571585018c09890fd91b071f403235
041f430d5d369f1f01c615c91a02401f014908102500071725080b1204b8
ffc0402b120b3f4f0401400401d0040140045004600470049004b0040604
ec0c40120b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b
4bb028534bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc000
1fffc0383838594358bc001a0332000400140332e910e91bbc001a033200
0400140332ed10ed59003fed3fed313043794036011d12250e2602251c26
0a250626110f1420001d011a2001160914200018071a2001130d1020011b
03102001150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b81
01720171722b2b71015d0143584011750275067a0a7a0e7a127816751875
1c085d595d005d435c5840091c1011391b10113915b8fff0b10b39002b2b
2b5959591bb10010b807eab46c00070817b807ebb26c080b00183f2b3f2b
303159013217161514060623222726353436361722060615141233323635
3427260200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87
af7bfc80a58bad7ef977413f9e7cc8fedea0c3f48c60>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 7500 12 <0001000d000002b703af002801dab0852b58b1020243545840282a401313
0255061f171127040f0f025527181f0111080d0d025511040f0f02551106
0c0c0255111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee401110
1002551f14121202551f0e131302551fb8fffc400b0f0f02551f01100318
1619bb03e20018002603e2400e4f276f277f2703272807180c0307003fcd
2f3fdd5ded10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10
c410c431302b1bb10602435458402301100318262728076f097f0902090c
030718061f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8
ffeab40f0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2b
c010c4002f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f40
02400f820407402a015f2a011f291e18272211291e17862327272041261e
2744000a0b2a111420100104188009010939100c010c590303000718170a
5f0601400601062e1f2a012a0011241f1f1f2001802090200200201020b0
20c020d02005206029a66e182b4e10f45d71723c4d10fd3c1072e4717200
3f3c3f3c10ed72ed5d11173901111239390010f5edfc01f52b2b31300172
71005d59591bb2161819b803e2b46c180a280cb80813b36b03280700183f
332b3f2b3230315901153633321615140623222623220706071114171616
33152135323736373635113426262322072725014c737937483424235715
12152d30130d423efe2b4622190a050d231a1f270a011503afcece432c27
364514295efe494c271b24242416102311500163a03d1c0f2470>WXTHQQ+TimesNewRomanPSMT AddT42Char 
WXTHQQ+TimesNewRomanPSMT /CharStrings get begin
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
/g12 12 def
end
WXTHQQ+TimesNewRomanPSMT /Encoding get
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 11 /g11 put
dup 12 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WXTHQQ+TimesNewRomanPSMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 243{/.notdef}rp]
WXTHQQ+TimesNewRomanPSMT nf
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
83.5078 279.996 mo
(\006\007\010\011\006\011\012\013\014\013)
[5.8608 3.89834 4.4 74.668 5.86081 2.43753 4.39999 4.40001 2.93034 0 ]xsh
337.535 271.977 mo
337.535 269.238 li
.696254 .631098 .620691 .585718 cmyk
@
430.297 271.977 mo
430.297 269.238 li
@
.653895 .581659 .568902 .37409 cmyk
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
329.227 279.996 mo
(\006\007\010\011\006\011\012\013\014\013)
[5.86081 3.89835 4.39999 74.668 5.86081 2.43753 4.39999 4.39999 2.93036 0 ]xsh
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WXTHQQ+TimesNewRomanPSMT gcheck setglobal} if
1 8096 13 <000200220000042b054c001f002c01b1b0852b58b9002effc040933a352f
2e7518741b741c7c28702e951c077918b724ba28db1bdb1cda2406192710
2e2826392539273b28302e5a276927702e802e0bc600011a1c291c4b1cd7
19db1b05a82801ca24d917da24d927d828eb24061c40231d28080e1f1b08
2122011f1b0721230f1f1b152123001d202c2a1d283f234f230223230715
2a281616150208070812001a101a301a401a701a051a492eb8ffc0403e3f
35002e01402eb02e029f2ec02ed02e032e2c010613130255010c0f0f0255
010c0d0d025501220f0e0c101002550e0c0f0f02550e1a0d0d02550e9e2d
2eb80177b3216163182b2b4ef42b2b2b3c4dfd2b2b2b3c4d105d71722bf6
5d4d4358b90026032de91bb90026032ded59003f3c3f3c10ed1112392f5d
ed12393912392b2b2b31304379401c2429171c182528262917263301241c
26330127192a3301251b2333002b2b012b2b2b2b81810049547940101e22
211f233b04221e203b0021201f0001103c103c2b002b8101715d00717201
72005d015d2b1bb11d23b807eab56c1d1d08152ab807f1b26c1514b803e2
b56c1502050809b803e2b26c080800183f2b323f2b2b12392f2b30315901
111417163333152135333237363511342726232335213216161514062322
262716163332363534262623220701a41c264d34fdbb335625141b274d33
01f1b6d290dbc831724135521d68974884543350027bfe75801f2c252538
1f74036c801f2c254bb27aa6d00e470a0aa18058974b1300>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 8660 14 <00010046ffe4034a03af00210222b0852b58b2080401b102024354584020
021a060c10100255060c0f0f0255060c0d0d02550616250f090760217021
0221b8ffc0b513130255211db8ffd4b4131402551db8ffcab6121202551d
3103002fed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040
732a2d340023430d5d36170d5705021c135404530553065407581b581c07
6705760580008021b41bc520d020e000e50509370147015618551c5f2360
18601c7618721c8a128e1390119018a601a402af23b301c101c707c719e9
08e41cea20f4011806024a1257128b1f8b208023f02307112001bcffe000
20ffe0001fffe0b2001d00b8034640301021016021802102002110212021
5021602170219021a021b021c021d021e021f0210d21661ddf0f010fc716
2509071db8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f
0c020c2f100030004000600070009000b000c000e00009300040000200aa
731a831a02501a019f1a011ab8010c4012f0060100061006200630064006
0506432243b9029100182b4e10f472714ded5d7271fd715de47172ed003f
ed2b2b3feded7110f45d7172e412b10602435458400a531d631d731d0393
1d01005d7159393130383838013801715d005d017200722b2b435c58b400
1018391bb8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b
2b2b2b012b595901711bb70f0f092121030916b807eab46c0907031db808
1cb26c030b00183f2b3f2b12392f11392f30315901060623220235340033
321615140623222726262726232207061514163332373637034a25d8839c
e80101b487ae312c3b1e110b23233e643d51a189624e3734015cb5c30106
dfd8010e8f4d262f2615761f1e4a62a1a4fb432e7900>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 9312 15 <00010014fff1023c04c1001b0228b0852b58b1020243545840251d401213
02551d40101002550b0c18121202550c15130105131812120255130e1313
025513b8fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255
130b082c0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b
2bddc010c62f2bcd31302b2b1bb106024354584019170c10100655160c10
100655150c10100655160c101006551bb8ffe8b4101006551ab8ffe8b410
10065519b8ffe8401410100655700b010b0f1b01156914014914011404b8
011b401c0106082c0f0b1b0105021010065505080f0f0655050c0d0d0655
0513b8ffeeb41010065513b8fff0b40f0f065513b8fffab70d0d06551313
1d1c1112392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d31
30012b2b2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d991199
19bf15bf16b819e819079f1d01891a014f0c4f0d5f0c5f0df51805061815
18271803161518191a030118191a03141ba00103153004b8011b401c0103
30020201060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec40
2c200c010c2e2f1db01d021d000101040405241450130180130100131013
b013c013d013e0130613601cab89182b10f65d71723cfd3c103c103c105d
f45ded10ed10f45d3c003ffde43f3c10ed10edfd3c10e401111739001117
391239313000715d0171725d00722b59591bb61b014014160104b807ecb4
6c01060f08b80809b26c0f0b00183f2b3f2b39391a10cd30315901113315
231114163332363733060623222626351123353636373637014ad6d63328
213e11272380442e582a9137732d172904c1fed346fdae593e2928626333
5f630268211669482665>WXTHQQ+TimesNewRomanPSMT AddT42Char 

1 0 16 <> WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 9952 17 <00020049ffed038903af0032003d038bb0852b58b1020243545840203f40
0d0d02553f4013130255151b072e25080b0b0255250c0d0d025525000c33
b8fff0400b1212025533161313025533b8ffdeb41010025533b8fff44015
0f0f0255330c0d0d02553339070c0d0d0255072d2eb8ffc0402009120255
2e33001e04292c30340c40090b02550c401d1d02550c40111202550cb8ff
d4401e091202550c0c047f180118401112025518401d1d02551810251e07
3c2c04002fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd01
2f2bcd2f2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a3302
1253360112201f39803fa809b60a03122b127d007d3386008b0b8b35061d
12163a103f803f04091c4c054c06452045224c3a403f891d080a0e072000
2249014b0a490b49354b37433a493d570b670b8509840a840b0f54168316
021f3f5f3f0260083300343c2e292d34bb011b000c000cffc0b609390c28
0b390cb8ffc0401a3a35100c500c02400c500c600c03200c500c600c760c
040c3c18b8ffd840290b394f185f186f18032f187f1802187e1f10011025
1e07303c403c023c2c04702d802d022d35292c30b803464011040b2ec02d
012d602500330d0c0c343433b8fffcb41010065533bb016700240025ffc0
401a0e3900251f2580259025044025f0250280250125101010065525bb02
4300070015ffc0b21f3915b80167401e1b2f393107400e39200750078007
03100701f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b
10fd2b5d71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed71
3fed72fd5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed
11123911123939313043794047353b1c23051337383638020609080a0802
06212220220206350b392000111d131c0012130f1f0d1c0122233b05391c
00380834200135340b121c101c010e22101c013a063c1c002b2b2b3c103c
2b012b103c2b103c2b2b2a2a2a818181017201710071017172005d4358b2
3f12015d59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b6
0e3937200e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391c
b8fff0401a0b390a280b3937280b390a280a3937280a390a280939372809
39002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59005d591bb51818041e0c34b8
07e8b56c0c0c301e10b807e8b46c1e073029b8080db46c300b043cb80809
b26c040b00183f2b3f2b3f2b12392f2b1112392f30315925060706232226
353437363637353426232207061517140623222635343633321716171615
1114161633323736371506232226271106070606151416333202478d2436
3d5f7b1e29cbec57533f2526022f26252fb09f7a4e3b1c120a170f100c15
3c7066313a01972c4f4456384c846d1119826a433144785624896622222c
3a2e32342d5690291f422b85fec9833b14070d3c38964493015d3c192c60
39485f00>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 11036 18 <0002002300000568054c00280034024db0852b5840b224180f0f0255250c
0f0f0255872201128526c523c52d034924a72d02181f172e662403090109
252625470058016f026f247b017b02731f7320762278258a018720982dab
01ab25b726bc2dff2415062084018c2484279a24a501a402a624af2dbf2d
d830ef2dff2d0d120016011a0212281a301a313a2e3a306624692f0a2a08
021c1c01151f1b0f21220025281b00081f1b0e2123161f1b1c212340022c
2524242202011402020124ac022002072a29a507b8ffc040170f0f025507
100750076007039007a0070207001bac1c34b80191400f32281d1d1c020f
0e0e010100081221b8ffc0b2583521b8ffc040454f350021af21024f21a0
210221b510360140367036d036033634080613130255080c0f0f0255080c
0d0d0255082216150c10100255150c0f0f0255151a0d0d0255159e3561b9
011900182b4e10f42b2b2b3c4dfd2b2b2b3c105d72f45d712b2b4358b900
2f032de91bb9002f032ded59003f3c103c103c3f3c10eded10ed12395d72
2f2bfd3c103c191a10ed870e2e182b7d10c40112391a182b2b10ed0110c0
2b8710057dc43130184379401c2d311e231f252d232f3301311e2f33012e
222c330023243020323301002b103c2b012b2b2b81810172715d0072715d
435c58b90025ffe0b20c3901b8fff0b2143928b8ffe0b614390210193928
b8fff0b5103930100f39002b012b2b2b2b002b59015d2b2b1bb2242c04b8
07e940096c2c2c0f1c01081c34b807fcb26c1c32b807eeb26c1c1bb803e2
b66c1c02280c0f10b803e2b26c0f0800183f2b32323f2b2b2b3f1112392f
2b3230315921210106232226271114171633331521353332373635113427
262323352132161615140607011616170132163332363534262322070568
fe96fe3533200d1e101c264c35fdbb335625151c274d3301eed8cd8fa3ab
0118608a6ffc3d131c09c2c59f833a63027a020101fe76801f2c2525381f
74036c801f2c253fa9757db826fe7b86580c029401a8827f9f130000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 11784 19 <0001003d0000020f058e001501acb0852b58b10202435458b90017fff640
1d0d0d0255140c06010701080d0d025501040f0f025501060c0c0255010c
b8fff2b4131302550cb8ffeab40c0c02550cb8ffe2b40d0d02550cb8ffd6
b4101002550cb8ffdeb50f0f02550c05bd03e2000803e20007001303e240
0b131440090d025514150007002f3fdd2b32ed10eded012f2b2b2b2b2bcd
2b2b2bc410c410c631302b1bb10602435458402713121010065514141010
065513141500000007010c0d0d065501021010065501040f0f0655010cb8
fff0b4101006550cb8fff4b40f0f06550cb8fff0b70d0d06550c0c171611
12392f2b2b2bcd2b2b2b002f3f3fddcd3130012b2b1bb79017c017f01703
17b8ffc0b33f463417b8ffc0403a393b340117b20d643650170140175017
601770179017a017f017070c291e074a2201291e06272314270d41131e14
4415000007060a0001240d0cb8ffc0b33f46340cb8ffc0401a353b34900c
01500c01600c700c900ca00cf00c050cb216b2a3182b10f65d71722b2b3c
fd3c003f3c3f3cf5edfc01f52b2b3130015d0171012b012b2b017259591b
b41500050708b803e2b26c070a00183f2b323f3031590111141616331521
3532363635113426262322072725017b193447fe3f3f2e1a0e1f181a2811
0111058efb4156381d24241a3c5503409b471a1023700000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 12288 20 <00010011ffe403ed0394002002eab0852b58b10202435458b60909001a12
0614be03e2001103e2002003e2000203e2b10006003fededecec3f2f1239
012f31301bb106024354584031180a091b080909222109001a0b14161010
0655141306112a1010065511120602161010065502010620161010065520
0006003fcd2b3fcd2b3fcd2b3fcd2b3f1239011112392fddcd10ddcd3130
1b400912530a58185b190319b8ffd8b20b3522b8ffc0406115351419141a
2309220a2111201224182019201a3a09390a3a12391835193a1a4a084909
440a45184519491a69089c0899099d1a9a1b9f22a900a808a509a219a21a
a81bbe08b509b60ab618b719ba1abb1bc022d518f60af618fb1a2d9f0901
22b8ffc0b332603422b8ffc0b32b313422b8ffc0b31e293422b8ffc0b347
473422b8ffc0b327273422b8ffc0b323233422b8ffc0b311113422b8ffc0
4040191c340f227c007201720270057c20810585118f22093a08340a3418
391bc606c021d81a07880a891887190337124818021318141e13001b201e
00120a111e12b8ff86402c091a192018191930090a1409090a1b1a1a2409
0814090908070605040408021e01131212010100061a190b18b8011d4012
5f0a01100a240a9f0ab60ad40a050a7d091bb80167401040062fa008b908
ce0803087d0919751abb011b00200009ffc0b30f123409b8ffc0b3191d34
09b8ffc0b2323509b8ffc0b70c350009c0090209b801bfb6102201802201
22b8ffc0b3191d3422b8ffc0b60f133421ab89182b19102b2b7172f45d2b
2b2b2b1afd18e61910f45d18f41aed1910f45d7218ed003f3c3f3c103c10
3c10ed01111739872e2b0e7d10c487052e182b0e7d10c42b180010ed0110
c00010ed0110c00010ed0110c03130015d5d5d712b2b2b2b2b2b2b2b005d
015d2b2b0172435c58b50a20160d3f08b8ffe8b7160d3f09240b3918b8ff
e0b213390ab8ffe0400a1339082013391b201339012b2b2b2b002b012b2b
5959591b400d091a0012061a0b201114030003b803e2b26c000600183f2b
17323f3f1112393031591321152322061514171313363534272626233521
150607060701230126262726271101af1c272915d5d617080b2234012b34
14231cfebb29feb916281f113203942526202330fe06020d381d0e090f0b
252504111e46fcee0305362f10090800>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 13144 21 <00010064ffe402d503af0031046ab0852b58b10202435458402733401313
025533400b0b02550201181010025501180f0f0255010f1b1a08270c0b0b
025527210fb8ffe0b4101002550fb8fff440320f0f02550f310708270f21
04122b05017905016c050105252f0101012a0719771e01631e011e25201a
01601a701a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f01
2f2b2bcd2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f27
08042a161e122e05022a3107601a701a021a19124b05016b057b05020525
2a07441e01641e741e021e25120b01210fb8fff2401a0d0d06550f0f3332
1a080e0d0d06550827120d0d0655272733321112392f2bcd2bc41112392f
2bcdc4003fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b
4029092c192c0212122e400b392c280b391814590c5a269b109424050a07
0a280a29603370338033060f33b8012040870d5d36cb0dcb0ec424c425d7
23d624d92ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f0380
15801a801b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c
031614121c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f
335f337829782c860ea823af33e803e61c0c2908311e00bd021e011f012f
010201b8012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a
021ab8012bb219bd16b8011a4022121224230d0b040f2724230d0b04051e
01c7002e2f2a31000005252a071a7e191918b803464014162f1e25120b02
cc12010112cf21df21ef210321b80314400b700f01600f700f900f030fb8
01364019271a192e1f0801082c9f270160277027802703202730270227ba
012000320120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2
ff21015d59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c
10e410ed1112173901111217394358400a242323240d0b140d0d0b870e2e
2b0e7d10c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4ed
b10602435458b42e20090d34002b5931304379401c28291f20101106071f
11211c010629081c0020101e1c000728051c01002b2b012b2b8181818101
5d43584009fb07f610f611fb28045d5901720071005d435840199f019f02
9f039f0b9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b
2b4358400b2f232f248b2c9b249b2c055d59435c58401128201939092819
3901400a3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c40
0a392c4009390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b21939
24b8ffe8b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b2
12391ab8ffc0400f123901401239024012392c20123924b8fff0400f0f39
2c180f3903100d392e400d3923b8fff040120d390c100d392c200d392c18
11392c181139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b012b2b59005d59591b400d02022e1a1a162e3107190a2a05
b807e6b46c2a07121eb807e6b26c120b00183f2b3f2b3f3f1112392f1139
2f3031590111232626232206151417161717161514062322272623220723
11331616333236353426242726353436333217163332363702902126775c
4656201f5f92cbbd75546c2115170d21211c9e62455761fede2d2d9b7b36
4d331110120c03affec8936a4a2d3828292e4763a27d991e0a1a01478c8e
5139455e903a39577198170f0e180000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
WXTHQQ+TimesNewRomanPSMT /CharStrings get begin
/g13 13 def
/g14 14 def
/g15 15 def
/g16 16 def
/g17 17 def
/g18 18 def
/g19 19 def
/g20 20 def
/g21 21 def
end
WXTHQQ+TimesNewRomanPSMT /Encoding get
dup 13 /g13 put
dup 14 /g14 put
dup 15 /g15 put
dup 16 /g16 put
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WXTHQQ+TimesNewRomanPSMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 234{/.notdef}rp]
WXTHQQ+TimesNewRomanPSMT nf
WXTHQQ+TimesNewRomanPSMT*1 [6.74e-16 -11 -11 -6.74e-16 0 0 ]msf
12.7617 165 mo
(\015\007\014\016\007\010\017\020\014\021\010\012)
[-6.116 -4.87292 -3.66292 -4.87292 -4.87292 -5.5 -3.04692 -2.75 -3.66292 -4.87292 -5.5 0 
]ysh
258.48 165.313 mo
(\022\007\023\021\017\011\024\007\020\014\011\025\012)
[-7.326 -4.87292 -3.04692 -4.87292 -3.04692 -3.04692 -5.5 -4.87292 -2.75 -3.66292 -3.04692 -4.27908 
0 ]ysh
496.914 11.914 mo
570.519 11.914 li
570.519 262.801 li
496.914 262.801 li
cp
0 0 0 0 cmyk
f
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WXTHQQ+TimesNewRomanPSMT gcheck setglobal} if
1 14420 22 <00010022000006f2054c00300204b0852b5840e80f18010e0008170e190d
280f290f2a043007123d013d2f59186f0168186d2f791897019a2fcb18da
18e801eb180d0d18010a1706304630033618363047180316302718263003
061805301717032b00291826303b003a173918351935303f324f3268007a
007618791974308a008918853099009730a900a630a032b032cc17c918c0
32dc17d918d032ed17ea18ea19e032f600fa17f7302548014917462f5a01
5917562f6a177819c618c530d618d630e518e5300e0f1f1b092122201f1b
1a21222e1f1b282122021f1b082123101f1b162123211f1b272123171818
220001140018190001191818b802c9403e302f14301817302f182f012f18
0316171a1919170209080800003030272808305b000002192f2e22202021
a021b021c021d021e02106219e403201320102b802c9400d100f200f1102
550f9e3161dc182b4e10f42b3c4dfd3c4d105df65d3c4dfd3c3c11392ffe
003f3c3c103c103c103c3f3c103c103c173901113987082e2b057d10c487
082e182b057d10c4182b2b2b2b2b2b3130015d5d7171717100715d435c58
401b2f10140c3f0110140c3f0110103918181139181012390008183917b8
ffd0b5173917301439012b2b2b002b2b2b002b2b59015d005d1b400c0118
2f03091916020008191cb803e240096c190206252903090ab803e2b36c28
090800183f332b17323f2b3f3f1112173930315921011114171633331521
353332373635113427262623352101012115232207061511141716333315
2135333237363511010346fdf41b255030fe2830562416140e4b53018001
ec01e401802f5724161c25502ffdc030572316fdf50475fc767d1f2a2525
34207203765a281d2725fbdb042525342072fc8a7d1f2a2525342072038a
fb8b0000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
1 15084 23 <00020044ffe40405058e001f002d0272b0852b58b1020243545840262f40
101002552906180d0d025506080f0f0255060c101002550600201d160a0d
0d0255160b20b8fff4401112120255200c1313025520180d0d025520b8ff
f8400c0f0f0255201810100255201cba03e2001dffc0b6091002551d1f12
b803e240101340090e0255131400252509072c2c03002fed3fed3fdd2bed
2fdd2bed012f2b2b2b2b2bc0dd2bc410c02f2b2b2bcd31302b1bb1060243
545840521213140000200b0303252509071c701d01401d601d021d1f0b2c
2c030b160c0d0d0655160410100655160b20141010065520040f0f065520
020d0d065520202f2e290c0d0d06552906180d0d065506062f2e1112392f
2bcd2b1112392f2b2b2bc0cd2b2b003fed3fdd5d5dcd3fed1217393fddcd
31301bb9002fffc0b34747342fb8ffc040422b2e34602f7c047c058a0480
2faf2fc02f07402f802f02002f162a152b55055508542b96070748070120
2f370a470a560a9804a72aa02f07c02ff02b022020002021baffe0000bff
e040453c204f205e20660a6c207a209f009f20aa07b907c62a0b26081327
0c41121e1344151d2716411c1e1d441f0020210b042c1500252509071f2c
012c2c1f030b1f000b210c20b8016740121560168016af16031f16901602
16eb295006b8ffc0b3282e3406b8ffc0b7473506432e437f182b4e10f42b
2b4dedfd725d3cfd3c3c3c3c3c003f3ced723fed3f11173910f5edfc01f5
0010f5edfc01f531304379401a262b0408272526082920002b0429200028
072520012a052c2000002b2b012b2b2b8181005d3838383801715d007101
72715d2b2b59591bb514001f0b0925b807e9b46c0907032cb80805b26c03
0b00183f2b3f2b3f3f303159250606232226353412333217353426262322
072725331114161633323717052335112e0223220706151416333202c743
804a96e0f8c3794f0f20181a2b0d01112d0f21161b2d0bfef02e063c632f
58455bb06c5b67463dfbc5c501474da99d481a102370fbdda1471c112371
c901d84470394f68c8cad7000000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
WXTHQQ+TimesNewRomanPSMT /CharStrings get begin
/g22 22 def
/g23 23 def
end
WXTHQQ+TimesNewRomanPSMT /Encoding get
dup 22 /g22 put
dup 23 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WXTHQQ+TimesNewRomanPSMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
232{/.notdef}rp]
WXTHQQ+TimesNewRomanPSMT nf
WXTHQQ+TimesNewRomanPSMT*1 [11 0 0 -11 0 0 ]msf
502.395 25.9414 mo
(\026\013\027\007\023)
[9.77905 5.5 5.5 4.87292 0 ]xsh
502.395 32.68 mo
519.676 32.68 li
519.676 49.961 li
502.395 49.961 li
cp
0 0 0 0 cmyk
f
1 lc
511.031 48.234 mo
511.031 45.641 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 37.004 mo
511.031 34.41 li
@
504.555 37 mo
517.516 37 li
517.516 45.641 li
504.555 45.641 li
cp
0 .678187 .511376 0 cmyk
f
504.555 37 mo
517.516 37 li
517.516 45.641 li
504.555 45.641 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 41.324 mo
517.512 41.324 li
@
502.395 49.961 mo
519.676 49.961 li
519.676 67.242 li
502.395 67.242 li
cp
0 0 0 0 cmyk
f
511.031 65.516 mo
511.031 62.922 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 54.281 mo
511.031 51.691 li
@
504.555 54.281 mo
517.516 54.281 li
517.516 62.922 li
504.555 62.922 li
cp
.115389 .502129 1 .00839246 cmyk
f
504.555 54.281 mo
517.516 54.281 li
517.516 62.922 li
504.555 62.922 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 58.602 mo
517.512 58.602 li
@
502.395 67.242 mo
519.676 67.242 li
519.676 84.523 li
502.395 84.523 li
cp
0 0 0 0 cmyk
f
511.031 82.793 mo
511.031 80.203 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 71.562 mo
511.031 68.969 li
@
504.555 71.562 mo
517.516 71.562 li
517.516 80.203 li
504.555 80.203 li
cp
.31046 .309331 1 .0233768 cmyk
f
504.555 71.562 mo
517.516 71.562 li
517.516 80.203 li
504.555 80.203 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 75.883 mo
517.512 75.883 li
@
502.395 84.52 mo
519.676 84.52 li
519.676 101.801 li
502.395 101.801 li
cp
0 0 0 0 cmyk
f
511.031 100.074 mo
511.031 97.48 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 88.844 mo
511.031 86.25 li
@
504.555 88.84 mo
517.516 88.84 li
517.516 97.481 li
504.555 97.481 li
cp
.58175 .110323 1 .00570687 cmyk
f
504.555 88.84 mo
517.516 88.84 li
517.516 97.481 li
504.555 97.481 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 93.164 mo
517.512 93.164 li
@
502.395 101.801 mo
519.676 101.801 li
519.676 119.082 li
502.395 119.082 li
cp
0 0 0 0 cmyk
f
511.031 117.355 mo
511.031 114.762 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 106.121 mo
511.031 103.531 li
@
504.555 106.121 mo
517.516 106.121 li
517.516 114.762 li
504.555 114.762 li
cp
.777676 0 1 0 cmyk
f
504.555 106.121 mo
517.516 106.121 li
517.516 114.762 li
504.555 114.762 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 110.441 mo
517.512 110.441 li
@
502.395 119.082 mo
519.676 119.082 li
519.676 136.363 li
502.395 136.363 li
cp
0 0 0 0 cmyk
f
511.031 134.633 mo
511.031 132.043 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 123.402 mo
511.031 120.809 li
@
504.555 123.402 mo
517.516 123.402 li
517.516 132.043 li
504.555 132.043 li
cp
.732937 0 .622614 0 cmyk
f
504.555 123.402 mo
517.516 123.402 li
517.516 132.043 li
504.555 132.043 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 127.723 mo
517.512 127.723 li
@
502.395 136.359 mo
519.676 136.359 li
519.676 153.64 li
502.395 153.64 li
cp
0 0 0 0 cmyk
f
511.031 151.914 mo
511.031 149.324 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 140.684 mo
511.031 138.09 li
@
504.555 140.684 mo
517.516 140.684 li
517.516 149.325 li
504.555 149.325 li
cp
.709804 0 .277043 0 cmyk
f
504.555 140.684 mo
517.516 140.684 li
517.516 149.325 li
504.555 149.325 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 145.004 mo
517.512 145.004 li
@
502.395 153.641 mo
519.676 153.641 li
519.676 170.922 li
502.395 170.922 li
cp
0 0 0 0 cmyk
f
511.031 169.195 mo
511.031 166.602 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 157.961 mo
511.031 155.371 li
@
504.555 157.961 mo
517.516 157.961 li
517.516 166.602 li
504.555 166.602 li
cp
.681636 .103883 0 0 cmyk
f
504.555 157.961 mo
517.516 157.961 li
517.516 166.602 li
504.555 166.602 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 162.281 mo
517.512 162.281 li
@
502.395 170.922 mo
519.676 170.922 li
519.676 188.203 li
502.395 188.203 li
cp
0 0 0 0 cmyk
f
511.031 186.473 mo
511.031 183.883 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 175.242 mo
511.031 172.648 li
@
504.555 175.242 mo
517.516 175.242 li
517.516 183.883 li
504.555 183.883 li
cp
.572045 .344915 0 0 cmyk
f
504.555 175.242 mo
517.516 175.242 li
517.516 183.883 li
504.555 183.883 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 179.562 mo
517.512 179.562 li
@
502.395 188.199 mo
519.676 188.199 li
519.676 205.48 li
502.395 205.48 li
cp
0 0 0 0 cmyk
f
511.031 203.754 mo
511.031 201.164 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 192.523 mo
511.031 189.93 li
@
504.555 192.523 mo
517.516 192.523 li
517.516 201.164 li
504.555 201.164 li
cp
.354314 .546288 0 0 cmyk
f
504.555 192.523 mo
517.516 192.523 li
517.516 201.164 li
504.555 201.164 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 196.844 mo
517.512 196.844 li
@
502.395 205.48 mo
519.676 205.48 li
519.676 222.761 li
502.395 222.761 li
cp
0 0 0 0 cmyk
f
511.031 221.035 mo
511.031 218.441 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 209.801 mo
511.031 207.211 li
@
504.555 209.801 mo
517.516 209.801 li
517.516 218.442 li
504.555 218.442 li
cp
.170657 .678828 0 0 cmyk
f
504.555 209.801 mo
517.516 209.801 li
517.516 218.442 li
504.555 218.442 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 214.121 mo
517.512 214.121 li
@
502.395 222.762 mo
519.676 222.762 li
519.676 240.043 li
502.395 240.043 li
cp
0 0 0 0 cmyk
f
511.031 238.312 mo
511.031 235.723 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 227.082 mo
511.031 224.492 li
@
504.555 227.082 mo
517.516 227.082 li
517.516 235.723 li
504.555 235.723 li
cp
0 .757412 0 0 cmyk
f
504.555 227.082 mo
517.516 227.082 li
517.516 235.723 li
504.555 235.723 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 231.402 mo
517.512 231.402 li
@
502.395 240.043 mo
519.676 240.043 li
519.676 257.324 li
502.395 257.324 li
cp
0 0 0 0 cmyk
f
511.031 255.594 mo
511.031 253.004 li
.696254 .631098 .620691 .585718 cmyk
@
511.031 244.363 mo
511.031 241.77 li
@
504.555 244.363 mo
517.516 244.363 li
517.516 253.004 li
504.555 253.004 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
504.555 244.363 mo
517.516 244.363 li
517.516 253.004 li
504.555 253.004 li
cp
.696254 .631098 .620691 .585718 cmyk
@
504.555 248.684 mo
517.512 248.684 li
@
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WXTHQQ+TimesNewRomanPSMT gcheck setglobal} if
2 0 24 <0001ffe5ffea05aa054c002701f7b0852b58404b8a1201128f010102404f
358f0201121d020127022d13381378139802df02ff020713222212101f1b
0a2122211f1b1b2122031f1b092123141f1b1a2123121211010202221222
1412122222b801a2400f27ac010a090901021b1a0812090302b802c9400c
125311112010301040100310b8ffe0b41111025510b8fff4b40f0f025510
b8fff4b60d0d0255109e29b8ffc040103f35402901202901a029e0290229
1314b802c940152121302201c02201220c1010025522100f0f025522b8ff
f0400a0d0d025522192861a2182b4e10f42b2b2b5d713c4d10fd3c4d105d
71722bf62b2b2b5d3c4d10e6fd3c003f3f3c3f3c103c10eded872e2b057d
10c40012390139182b2b2b2b07103c3130005d7243584028091219122901
3f0039124f004a125f005a126f006a127a129b01a901bb01b512cb01fa01
12ef0201005d015d5900712b0171435c58b90002ffa8b31e123f02b8ffc0
b3160d3f12b8ffe8b6173901401c3912b8ffe8b21c3912b8ffe8b21b3912
b8ffe8b619390108183912b8ffd8400f1239121612390210153902101939
13b8ffd8b20b3902b8ffd0b20b3902b8fff8b5143902401139002b2b2b2b
2b2b2b012b2b2b2b2b2b2b002b2b59005d1b400c13021b0900021209270c
0908b803e2b56c0902181b1cb803e2b26c1b0800183f2b323f2b32323f3f
111239393031590321011134272623233521152322070615112301111417
16333315213533323736351126262726231b0170033d1c25502f01d83056
241624fc821b264f30fe282f5724163b3d3b1d3b054cfc07030e7d1f2a25
25342072fb890444fcbd7d1f2a252534207203af452c1309>WXTHQQ+TimesNewRomanPSMT AddT42Char 
2 624 25 <0001000bffe005b1054c002e01acb0852b58b90030ffc0b32a2f3430b8ff
c0b320243430b8ffc04054161c3428063a064c06790f0425232527322332
2745234527a5270729273927025030740b7b0f9a27bf27f826063c0e081f
1b0221221f1f1b1921222a1f1b012123131f1b1821231918180202010225
280d092a29b8fff1b41010025529b8ffe6b40f0f025529b8ffe6b40d0d02
5529b802c94010090908400c3908403f35200830080208b8fff440111414
0255080c1313025508061010025508b8fff4b60f0f0255081a30b8ffc040
443f351030017030a030b030e03004301f200613130255200c0f0f025520
0c0d0d0255202212127f13016f1301130c10100255130e0f0f0255131e0d
0d025513192ff4a2182b4e10f42b2b2b5d5d3c4d10fd2b2b2b3c4e105d71
2bf62b2b2b2b5d2b2b3c4d10fd2b2b2b3c003fed3f3c103c103c2b2b2b2b
31304b5179b137084379402621280a112221232102060f252725240e202d
001011260c292d010b0a2110252d00280b252d002b2b01103c2b103c2b2b
2b2a8181015d71005d0071012b2b2b1bb5041b00031817b803e2b56c0118
020d25b807f4b26c0d0900183f2b3f332b17323031590135211523220706
15111406062322262726351134262323352115232207061511141e023332
363635113427262303d101e033502b1551edccdee63020454d33024a3454
24191d4c8f6885d24d1c274d05272525431f71fddacce1a19a8259f50212
7d4e2525352472fdb14fcc724a74b5d802257f202c000000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
2 1188 26 <00010029000004b7054c002000e1b0852b58401b10001001200020014022
5702670277028a209920a920b9200c0122b8018e40330e643655025c1e02
091f1b03212216371b113d220a1f1b102123201f2000300040000300e71c
1110021c2302030800ac016c02b802c4402f16170613130255170c0f0f02
55170c0d0d0255172209090a0c101002550a0c0f0f02550a1a0d0d02550a
9e21615d182b4e10f42b2b2b3c4d10fd2b2b2b3cf4f4ed003f3ced3f3c10
e45d39392b2b2b313001722b015d1bb500000312100fb803e2b46c100203
1cb807f4b26c0304b803e2b26c030800183f2b2b3f2b3212392f30315901
170321353332373635113427262323352115260606151114171616333332
363604962174fbe6335625151c274d3302666c5720100c3283639c7e6801
7707fe9025382074036b7f202c2525012a4079fcac531f15142e7500>WXTHQQ+TimesNewRomanPSMT AddT42Char 
2 1516 27 <0002002300000579054c001600210144b0852b5840590b1b0b1d86109510
d5100576107614871098139915c91bc91dd41008181112141d1e03071501
871a881e022808061f1b002122071f1b0d21231721191f280e0e0d021928
161600081c3c4f1201001210122012301240120512b8ffdeb60d0d025512
4923b8ffc0403e3f354023012023017023a023e023032321170613130255
170c0f0f0255170c0d0d0255172207060c10100255060c0f0f0255061a0d
0d0255069e226163182b4e10f42b2b2b3c4dfd2b2b2b3c4d105d71722bf6
2b5d724ded003f3c10ed3f3c10ed1139392b2b31304379401c1a1e0f1510
2514261e0f1c56011a151c56011d111f56011b131956002b2b012b2b2b2b
8181005d7101725d711bb10d21b80802b26c0d1fb807eeb26c0d0cb803e2
b46c0d020017b807fdb26c0019b807ecb26c0001b803e2b26c000800183f
2b2b2b3f2b2b2b3031593335333237363511342726232335212004121510
070621271633320011100023220723335624161c274d3302280130013dc1
acc1fe75db7f56e80132fecef05a7325372173036c7f202c258afebed3fe
e5bed4621c01460117011901441d0000>WXTHQQ+TimesNewRomanPSMT AddT42Char 
2 1952 28 <0001001b000003e7039400380440b0852b58b10202435458400c260a1834
26042d001c1f2c2fb803e2b42d13100238b803e2b6002d1e11060006003f
3f2f2f10fdd0d0c010fdd0d0c011121739012f31301b408712450a018f0d
8f0e8f1187268734d60bd617da27da33090f2e260a250b240c720a750be6
32071c3a2e0f5a36042e3f053f103f1138263f283934303a490b4f104f11
461e49264c284b34403a56195625503a75077f0b7f107f117f167f179507
9f109f11a718bb261e0e050f100f110f2c1f101f111f2c290a29172f3a0a
103a55095a36503a04b10602435458402413100279380138001c1f2c762f
012f2e2634180a04002e110600061e2e1d1d392e2e3a391112392f11392f
002f2f3f3f1112173910dd5dd0d0c010dd5dd0d0c031301b408126181819
171616273434350a0b0c0c33180a0907071926343534333525128f162f11
0111350c0d0d160c1d7d19501e011e2f256f237f2302238f23012319252e
2e39332df229292733500001007d35013505050725190707243525143535
250c16272730330c1433330c35342618090c17332725190b382f26180a03
0c3407351cb8ffc0402c090942550f1c011c1f1f2c2f2f2e131002381e00
121111010100062e2d2009094255042d012d2d1e1e1d0a0cb80145b56f16
01162e25b8010eb320190119b8ffc0400c10354019b019e019f0190419b8
ffc0b30f123419bb0236003300070167b2352e27b80108b300330133bb02
c10039003a024db321cd89182b2bf65dedf4ed10fd2b5d2b71edf45ded00
3f3c103c105d2b3c3f3c103c103c10fd3c3c3c10fd3c3c103c5d2b011112
391117390011121739870e2e2b870e7dc4870e2e182b870e7dc401181239
7d2f18ec10e45d1112392fe41112392f1112395d2f5d10e45d10e4111239
2f107cec5d10e40708103c0e3c870e103c7dc4c4870e103cc408c4070e10
3c083c0e3c59313001725d5d2b005d01710071435c58b9000bfff0b20a39
0bb8fff8b7093917201e123f0bb8ffe8b31e123f15b8ffe840091c113f0d
401b103f18b8ffe8b31c113f18b8ffe84013170e3f0540120b3f0718120b
3f3640120b3f3ab8ffc0b7120b3f29280f390bb8fff0b60f3925200f390a
b8ffd8b20f3907b8ffe0b20f3932b8ffe0b60d3925200d3907b8ffe0400f
12392620123926201139252011390bb8ffd8b20b390ab8ffe0b212390ab8
ffe0b211390ab8ffe0401b0d3910181239111812391740123910100f3911
100f392c40153913b8fff0b2153916b8fff0b2153912b8ffc0b215391ab8
fff0401315393608153928301439293014391108163909b8ffe0401b1639
29401139294015393240153932201139172011390b20113912b8ffc0b111
39012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b002b2b2b2b59591b400c0a
182634042e021013030038b803e2400a6c1100062c1f1c032e2fb803e2b3
6c1e2e0a00183f332b17323f332b17321217393031591321152206151417
161717373635342623352115060706070713161617152135323736353427
270706151416171521353637363737272626231b01af2921230b16414b48
22260136312431557de4544839fe502d1913408693442d2dfed5241b265a
c0ae4a513d0394251c17183210226868631a151d252503182272a7feb879
31032424140e17175dc4c45b11182702242405141d77fffc6c37>WXTHQQ+TimesNewRomanPSMT AddT42Char 
WXTHQQ+TimesNewRomanPSMT /CharStrings get begin
/g24 24 def
/g25 25 def
/g26 26 def
/g27 27 def
/g28 28 def
end
WXTHQQ+TimesNewRomanPSMT /Encoding get
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
dup 27 /g27 put
dup 28 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WXTHQQ+TimesNewRomanPSMT*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 227{/.notdef}rp]
WXTHQQ+TimesNewRomanPSMT nf
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 44.168 mo
(\030\031\032\032)
[6.35358 6.35364 5.36798 0 ]xsh
525.152 60.7852 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 62.1641 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 78.0781 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 79.457 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 95.3438 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
530.047 96.7227 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 112.625 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
530.047 114.004 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /GAAAAA+SymbolMT
Type42DictBegin
[<00010000000a000a000a000a637674202ac4fb85000000ac000005046670
676d5d3ae803000005b00000059f676c7966e0d19d8200000f5c00000350
68656164e842073b00000b5000000036686865610fa002c700000b880000
0024686d74781195019600000bac000000106c6f636102ae016a00000bbc
0000000a6d617870015d063700000bc8000000207072657056a9a53f0000
0be80000037367646972000000000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d00290053006100704040543f3e3d3c3b3a3938373534
333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716
1514131211100f0e0d0c0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
4123701020b802414520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b202020243604259b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b2021002436042595959592d00000100000005028fff32a8355f0f
3cf5081d080000000000a348bc3b00000000d4defd28fffffe3e08e7080b
0000000b000100000000000000010000080bfe3e00000856feabfc2e08e7
00010000000000000000000000000000000404cd00670400009104640025
04640079000000320106013801a800000001000000040067000500000000
00020010002f0055000000ee059f00000000b15412411402270227022602
26006f01160001005f01160001004f01160001003f01160001002f011600
01022fb22f1f1fb8022eb2a01f1fb8022cb21d291fb80224400be11a1f31
27121f3c27291fb80217403b6c291fe0aa191fe1aa191fab27321f883c32
1f833c321f2f3c321f7627321f3c27291f27aa291f6f276f6d6f866f8704
3700161600000012110840b801e3b655140914093790b801bf40390790bd
0790b307906707906407905707904607903607902e07902b079025079024
071408120810080e080c080a080808060804080208000814b8ffe0402b00
000100140610000001000604000001000410000001001002000001000200
000001000002010802004a00b013034b024b5342014bb0c063004b6220b0
f65323b8010a515ab005234201b0124b004b544218b0382b4bb807ff52b0
372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb10101
8e851bb0124358b9000101ff858d1bb9000101ff858d59590016763f183f
123e113946443e113946443e113946443e113946443e11394660443e1139
4660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b50
79bc001f01750007001f0174b3071f93072b2b2b4b5379bc009001750007
00900174b3079093072b2b2b181db0964b5358b0aa1d59b0324b5358b0ff
1d5901b341b5407b456523456023456560234560b08b766818b080622020
b140b54565234520b003266062636820b003266165b0b5236544b0402344
20b1417b4565234520b003266062636820b003266165b07b236544b04123
44b1007b455458b17b406544b24140414523614459b9004e0162b12a8e45
6523456023456560234560b089766818b080622020b9002a016245652345
20b003266062636820b003266165b80162236544b02a234420b14e8e4565
234520b003266062636820b003266165b08e236544b04e2344b1008e4554
58b18e406544b24e404e452361445945695342014b5058b108004259435c
58b108004259b3020b0a124358601b2159421610703eb0124358b93b2118
7e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba
04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a804
00000b2b59b0102342b0112342002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b7373737373001845694418456944435c58b9ffc00280b2121f322b59
2b0000>
[849 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 100 1 <00010000010702df0445005200ba407669336e34025f255f386f256d376f
38052f252f383f253f384f254f38065149433904324c344636041a2b2724
1d1710041f0a5149464339363427241d1a17100d000f123c2a33222e030b
074f32040a2b041f3f2e74223c4b1207744f3412065417171a15341f9927
7e36993f3f4c195354ef21729e182b2b4ef43c4d10fdfdfdf44e456544e6
003f4df4e410fd3ce4011112173900111239391112393911121739011112
173911123911123939111217393130005d5d015d01262726353436333216
151406073637363633321615140607060716171616151406232226272627
161716151406232227263534363637060706070623222635343637363736
37262726272635343633321616015d04182332241f2e3506372c44422220
2e42844d33344b794b2d1e1e493e293d021524301b251e152e0c053b2c49
251a1c223029291b603e3b364b7b1d2d2d1e214a6e02cb45446324343636
332ca14423324f262d1f253a1d11161b0e1642271e2c2a49312b3943762a
29371d152e3087333227305216102e1c1937120c140d191b0f1a15212f1b
2d2a7f00>GAAAAA+SymbolMT AddT42Char 
1 524 2 <000100000000041a041a000b0033b900010273b4030a1d0409b802734010
070a035801061d00075809190c2028182b4e10f44df43cfd3ce4003ff43c
fd3ce4313001331121152111231121352101dd6201dbfe2562fe2301dd04
1afe2261fe2501db6100>GAAAAA+SymbolMT AddT42Char 
1 624 3 <000100000053037303c4000b009d404b070a0b0b06040100000504070808
03010a090902030209091d0803140808030b0005051d060b1406060b0806
02000403090a010704040b090503040006089c020200070b09050d17171a
03b80146b509190c528d182b4e10f44dfd4e456544e63c103c003f3c4d10
fd3c11173917390111121739870e2e2b870e7dc4870e2e182b870e7dc407
100e3c3c07100e3c3c07100e3c3c07100e3c3c3130130101170101070101
270101460174017445fe8d017345fe8cfe8c460174fe8c03c4fe8e017244
fe8bfe8e460173fe8d4601730172>GAAAAA+SymbolMT AddT42Char 
1 0 0 <0002006700000467050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c31303311211125211121670400fc2003c0
fc400500fb002004c000>GAAAAA+SymbolMT AddT42Char 
GAAAAA+SymbolMT /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
end
GAAAAA+SymbolMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
pop
end
%ADOEndSubsetFont
/WXTHQR+SymbolMT /GAAAAA+SymbolMT findfont ct_VMDictPut
/WXTHQR+SymbolMT*1 
[/.notdef /g1 /g2 /g3 252{/.notdef}rp]
WXTHQR+SymbolMT nf
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
536.551 112.625 mo
(\001)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 129.906 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 131.281 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
539.75 129.906 mo
(\002)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
546.306 129.906 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
551.211 131.281 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 147.184 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 148.563 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
539.75 147.184 mo
(\002)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
546.306 147.184 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
551.211 148.563 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
557.715 147.184 mo
(\001)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 164.465 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 165.844 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
539.75 164.465 mo
(\003)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
543.684 164.465 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
548.582 165.844 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 181.746 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 183.121 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
539.75 181.746 mo
(\003)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
543.684 181.746 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
548.582 183.121 mo
(\017\013\017)
[1.7063 3.07996 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
555.086 181.746 mo
(\001)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 199.039 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 200.414 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
540.773 199.039 mo
(\003)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
544.707 199.039 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
549.605 200.414 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 216.316 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 217.695 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
540.773 216.316 mo
(\003)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
544.707 216.316 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
549.605 217.695 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
557.129 216.316 mo
(\001)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 233.598 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 234.977 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
540.773 233.598 mo
(\002)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
547.329 233.598 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
552.234 234.977 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
525.152 250.879 mo
(\033)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
531.508 252.254 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
540.773 250.879 mo
(\002)sh
WXTHQQ+TimesNewRomanPSMT*1 [8.8 0 0 -8.8 0 0 ]msf
547.329 250.879 mo
(\015)sh
WXTHQQ+TimesNewRomanPSMT*1 [6.16 0 0 -6.16 0 0 ]msf
552.234 252.254 mo
(\017\021\034)
[1.7063 2.72882 0 ]xsh
WXTHQR+SymbolMT*1 [8.8 0 0 -8.8 0 0 ]msf
559.762 250.879 mo
(\001)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/WXTHQR+SymbolMT*1 uf
/WXTHQR+SymbolMT uf
/GAAAAA+SymbolMT uf
/WXTHQQ+TimesNewRomanPSMT*1 uf
/WXTHQQ+TimesNewRomanPSMT uf
/FAAAAA+TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
